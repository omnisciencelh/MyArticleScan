{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1650434235984556033",
        "title": "什么时间投递简历？",
        "description": null,
        "content": "### 校招\n\n对于还在校园的小伙伴，一般情况下，招聘旺季主要是在 **秋招** 和 **春招** 这两个时间点。\n\n\n\n秋招的时间大概是每年的 9 月和 10 月，俗称 “金九银十”，面向大四 / 研二等即将毕业的同学。\n\n春招时间大概是每年的 3 月和 4 月，俗称“金三银四”，也是面向大四 / 研二等即将毕业的同学。\n\n\n\n要注意，春招招聘的岗位数相比较秋招来说会少很多。毕竟大多数企业在秋招就已经录取的差不多了，春招相对来说更像是“补录”，所以有没有坑位可能都不好说。\n\n\n\n### 提前批\n\n但是如今真的是越来越卷了，一些比较知名的公司为了抢人才，会搞 **提前批** 。2022 年一些大厂在 6 - 7 月份就开启了秋招提前批，8 月份就正式开启了秋招。所以大家投简历的时间也要相应的提前，最好是在 6 - 7 月份的时候就准备好简历。\n\n\n\n春招的时间也一直在提前，2022 年 2 - 3 月份很多大厂就开启了春招，所以大家最好是在 2 月份时就准备好简历。\n\n\n\n### 校招补录\n\n秋 / 春招还有补录阶段，秋招一般是每年 11 月之后，春招一般是每年 5 月左右。所以其实应届生在每年的 6 - 11 月，2 - 5 月都是有机会找到工作的，也不用太担心了。\n\n当然补录具体时间还是要根据招人公司的具体招聘情况和招聘截止时间来决定。如果公司已经招满了人，那么大概率就不会有补录这回事儿了。\n\n所以朋友们，早就是机会。\n\n\n\n### 暑期实习\n\n除了秋招和春招外，在每年的春招时期，也是暑期实习生招募的热潮，通常是 2 - 5 月和春招一起开始，主要面向大二、大三，或者研一、研二的同学。\n\n\n\n如果你明年即将毕业的话，一定要重视这个暑期实习。一方面是现在大厂越来越注重求职者的实习经历，另外一方面也是帮自己积累实践经验、验证自己是否适合这些工作。\n\n\n\n### 日常实习\n\n当然，上面所说的这些时间段并不完全适用于所有公司，除了这些重要时间点外。还有一类很不错的机会，那就是 **日常实习** 。\n\n很多公司会不定期地招募日常实习生，工作时间可能也比较灵活。比如我是在大三那年的 11 月份投递了字节跳动的寒假实习，并且于 1 - 4 月份参与工作。此外，腾讯、阿里、字节等等都有日常实习生的岗位，大一、大二、研一等所有在校的朋友们都可以投递简历。前提是自己先把岗位要求的技术学会，实习是为了检验自己的技术水平、实践自己学过的知识，而不要为了实习而实习。",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 44,
        "thumbNum": 1,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-04-24T09:39:20.000+00:00",
        "updateTime": "2023-05-06T14:29:22.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1310,
          "coin": 170,
          "followeeNum": 601,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-17T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-05-06T10:09:53.000+00:00"
        },
        "tags": [
          "文章",
          "简历",
          "求职",
          "经验分享"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1650433961396056066",
        "title": "如何获取求职信息？",
        "description": null,
        "content": "重点推荐几个找实习或工作的渠道：\n\n1）实习僧，鱼皮的第一份实习就是在这里找的，机会很多\n\n地址：https://tuiguang.shixiseng.com/\n\n\n\n2）牛客网，有很多互联网公司的内推机会\n\n地址：https://www.nowcoder.com/\n\n\n\n3）梧桐果，以校招为主\n\n地址：https://www.wutongguo.com/xiaozhao?majorid=1809\n\n\n\n4）各公司官网，比如 [腾讯校园招聘](https://join.qq.com/) 、[腾讯社会招聘](https://careers.tencent.com/home.html)\n\n\n\n5）公司官方招聘微信公众号，比如腾讯招聘公众号，上面还有很多求职指南\n\n\n\n其他：\n\n> 鱼皮没怎么用过，但是也有小伙伴推荐\n\n\n\n1. 智联招聘\n2. Boss 直聘\n3. 前程无忧\n4. 拉勾招聘\n\n\n\n还有一些获取公司信息、评价的渠道：\n\n1. 脉脉：知名互联网吐槽平台，上面有时也会发布招聘信息\n2. 校招薪水：了解各公司的薪资情况\n3. 天眼查：查询企业信息，了解企业规模和可信度",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 26,
        "thumbNum": 2,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-04-24T09:38:14.000+00:00",
        "updateTime": "2023-05-06T01:09:01.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1310,
          "coin": 170,
          "followeeNum": 601,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-17T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-05-06T10:09:53.000+00:00"
        },
        "tags": [
          "文章",
          "求职",
          "经验分享"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": true,
        "hasFavour": true,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1650433638489174017",
        "title": "简历项目亮点收集",
        "description": null,
        "content": "> by [程序员鱼皮知识星球](https://yupi.icu)，请勿对外公开！！！\n\n\n\n## 用户中心项目\n\n1. 为了提高开发效率，选用 Ant Design Pro 脚手架快速搭建基础页面，并对原始模板进行瘦身、抽象为可复用的公共模板，便于后续同类项目的快速研发。\n2. 在脚手架自带的 umi-request 请求库基础上进行改造和封装，添加全局请求拦截和全局异常处理逻辑、自动根据项目启动命令来区分环境，减少重复代码、提升项目可维护性。\n3. 选用 MyBatis + MyBatis-Plus 进行数据访问层开发，复用大多数通用方法，并且通过继承定制了自己的 **通用操作模板** ，大幅提升了项目开发效率。 \n4. 为了明确接口的返回，自定义统一的错误码，并封装了 **全局异常处理器** ，从而规范了异常返回、屏蔽了项目冗余的报错细节。\n5. 对于项目中的 JSON 格式化处理对象，采用 **双检锁单例模式** 进行管理，从而复用对象，避免了重复创建对象的开销，便于集中维护管理。\n6. 采用 Nginx 完成前端项目部署、采用 Docker 容器完成后端项目部署，并且使用宝塔面板对项目进行运维监控。\n\n\n\n## 伙伴匹配系统\n\n项目介绍：\n\n基于 Vue 3 + Spring Boot 2 的移动端网站，实现了用户管理、按标签检索用户、推荐相似用户、组队等功能。\n\n\n\n主要工作：\n\n1. 用户登录：使用 Redis 实现分布式 Session，解决集群间登录态同步问题；并使用 Hash 代替 String 来存储用户信息，节约了 xx% 的内存并便于单字段的修改。（需要自己实际测试对比数据，节省内存的原因是不用保存序列化对象信息或者 JSON 的一些额外字符串）\n2. 对于项目中复杂的集合处理（比如为队伍列表关联已加入队伍的用户），使用 Java 8 Stream API 和 Lambda 表达式来简化编码。\n3. 使用 Easy Excel 读取收集来的基础用户信息，并通过自定义线程池 + CompletableFuture 并发编程提高批量导入数据库的性能。实测导入 100 万行的时间从 xx 秒缩短至 xx 秒。（需要自己实际测试对比数据）\n4. 使用 Redis 缓存首页高频访问的用户信息列表，将接口响应时长从 xx 秒缩短至 xx 秒。且通过自定义 Redis 序列化器来解决数据乱码、空间浪费的问题。\n5. 为解决首次访问系统的用户主页加载过慢的问题，使用 Spring Scheduler 定时任务来实现缓存预热，并通过分布式锁保证多机部署时定时任务不会重复执行。\n6. 为解决同一用户重复加入队伍、入队人数超限的问题，使用 Redisson 分布式锁来实现操作互斥，保证了接口幂等性。\n7. 使用编辑距离算法实现了根据标签匹配最相似用户的功能，并通过优先队列来减少 TOP N 运算过程中的内存占用。\n8. 自主编写 Dockerfile，并通过第三方容器托管平台实现自动化镜像构建及容器部署，提高部署上线效率。\n9. 使用 Knife4j + Swagger 自动生成后端接口文档，并通过编写 ApiOperation 等注解补充接口注释，避免了人工编写维护文档的麻烦。\n10. 前端使用 Vant UI 组件库，并封装了全局通用的 Layout 组件，使主页、搜索页、组队页布局一致、并减少重复代码。\n11. 基于 Vue Router 全局路由守卫实现了根据不同页面来动态切换导航栏标题， 并通过在全局路由配置文件扩展 title 字段来减少无意义的 if else 代码。\n\n\n\n## API 开放平台\n\n项目名称：XX API 开放平台（或者 XX 接口平台、XX 免费接口平台、XX API 等）\n\n在线访问：xxx（建议提供可访问的、简短的线上地址）\n\n项目介绍：\n\n基于 React + Spring Boot + Dubbo + Gateway 的 API 接口开放调用平台。管理员可以接入并发布接口，可视化各接口调用情况；用户可以开通接口调用权限、浏览接口及在线调试，并通过客户端 SDK 轻松调用接口。\n\n\n\n主要工作（根据自己的方向选 6 个左右去写并适当调整文案，如果自己没有实现或不理解，就先不要写，灵活一点）：\n\n1. 根据业务流程，将整个项目后端划分为 web 系统、模拟接口、公共模块、客户端 SDK、API 网关这 5 个子项目，并使用 Maven 进行多模块依赖管理和打包。\n2. 使用 Ant Design Pro 脚手架 + 自建 Spring Boot 项目模板快速构建初始 web 项目，并实现了前后端统一权限管理、多环境切换等基础能力。\n3. 基于 MyBatis Plus 框架的 QueryWrapper 实现对 MySQL 数据库的灵活查询，并配合 MyBatis X 插件自动生成后端 CRUD 基础代码，减少重复工作。\n4. 前端：后端使用 Swagger + Knife4j 自动生成 OpenAPI 规范的接口文档，前端在此基础上使用插件自动生成接口请求代码，降低前后端协作成本。\n5. 为防止接口被恶意调用，设计 API 签名认证算法，为用户分配唯一 ak / sk 以鉴权，保障调用的安全性、可溯源性（指便于统计接口调用次数）。\n6. 为解决开发者调用成本过高的问题（须自己使用 HTTP + 封装签名去调用接口，平均 20 行左右代码），基于 Spring Boot Starter 开发了客户端 SDK，**一行代码** 即可调用接口，提高开发体验。\n7. 前端：使用 ECharts（或 AntV）可视化库实现了接口调用的分析图表（如饼图），并通过 loading 配置提高加载体验。\n8. 选用 Spring Cloud Gateway 作为 API 网关，实现了路由转发、访问控制、流量染色，并集中处理签名校验、请求参数校验、接口调用统计等业务逻辑，提高安全性的同时、便于系统开发维护。（更多 API 网关的优点参考：https://blog.csdn.net/guorui_java/article/details/124112897）\n9. 为解决多个子系统内代码大量重复的问题，抽象模型层和业务层代码为公共模块，并使用 Dubbo RPC 框架实现子系统间的高性能接口调用（实测单机 qps 达 xx），大幅减少重复代码。\n\n\n\n扩展思路：\n\n1. 前端：参考 Swagger（或 Postman）等 API 管理产品实现了 API 文档浏览及在线调用功能，并提供多级联动表单来提升用户输入请求参数 json 的体验。\n2. 前端可以阅读 Ant Design Pro 的文档，从框架的特性出发、结合自己做的功能去写一些亮点。\n3. 如果项目已上线且提供了一些 API 接口，可以说：自主开发了 XX、XX 等 API 接口并接入系统，累积调用次数达 xx 次，且接口调用可用性达 99.999%（4 - 5 个 9 都可以）\n4. 客户端 SDK 尽量使用最少的依赖，可以补充提一些 SDK 设计的亮点，比如：基于 Spring Boot Starter，自主设计客户端 SDK，并遵循 xx、xx、xx 等规范，保证了 SDK 的精简、避免依赖冲突。\n5. 使用 Docker 或 Docker Compose 来部署项目，可以写：自主编写 Dockerfile，并通过第三方容器托管平台实现自动化镜像构建及容器部署，提高部署上线效率。\n6. 思考如何保证接口调用的性能、稳定性和可用性（比如在网关增加限流 / 降级保护）？\n7. 思考如何提高开发者接入平台的效率、安全性等，真正地让平台成为开放平台。\n8. 可以考虑在微服务网关前搭建 Nginx 网关，通过负载均衡实现更大的并发。\n9. 在数据量大的情况下，使用 Spring Scheduler 定时任务离线计算结果集来替代实时查询，提高了后端统计分析的性能，单次查询响应时长从 xx 降低至 xx。\n\n\n\n如果简历内容过少，可以补充【个人介绍】或【自我评价】板块，提到：有较强的文档阅读能力，曾自主阅读 Spring Cloud Gateway、Dubbo（Ant Design Pro）等官方文档并能够运用到项目中。\n\n\n\n## 瑞吉外卖\n\n1. 为集中处理系统异常，自定义统一的错误码，并封装了 **全局异常处理器** ，屏蔽了项目冗余的报错细节、便于接口调用方理解和统一处理。\n2. 基于静态 ThreadLocal 封装了线程隔离的全局上下文对象，便于在请求内部存取用户信息，减少用户远程查询次数。\n3. 为兼容请求参数 date 类型的序列化，自定义 Jackson 对象映射器处理日期；并扩展 SpringMVC 的消息转换器，实现自动序列化。\n4. 自定义 MyBatis Plus 的 MetaObjectHandler，配合全局上下文实现写数据前的创建时间、用户 id 字段的自动填充。\n5. 遵循 Restful 设计规范编写接口，降低前后端接口沟通和理解成本。\n6. 为解决原生 Jdk 序列化器导致的缓存 key 值乱码问题，自定义 RedisTemplate Bean 的 Redis Key 序列化器为 StringRedisSerializer。\n7. 使用 Knife4j + Swagger 自动生成后端接口文档，并通过编写 ApiOperation 等注解补充接口注释，避免了人工编写维护文档的麻烦。\n8. 为省去重复编写用户校验的麻烦，基于 WebFilter 实现全局登录校验；并通过 AntPathMatcher 来匹配动态请求路径，实现灵活的可选鉴权。\n9. 为保证数据的完整性和一致性，使用 [@Transactional ]() 实现数据库事务，并配置 rollbackFor = Exception.class 来支持受检异常的事务回滚。 \n10. 为提高 XX 信息页加载速度，基于 Spring Cache 注解 + Redis 实现对 XX 信息的自动缓存，大幅降低数据库压力的同时将接口响应耗时由 0.8s 减少至 50ms（数值自己再测一下）\n11. 为降低开发成本，使用 MyBatis Plus 框架自动生成业务的增删改查重复代码，并使用 LambdaQueryWrapper 实现更灵活地自定义查询。\n12. 为降低用户注册成本、保证用户真实性，二次封装 XX 云 SDK 接入短信服务，并通过 Redis 来集中缓存验证码，防止单手机号的重复发送。\n13. 为提高数据库整体读写性能，配置 MySQL 主从同步，并使用 sharding-jdbc 实现业务无侵入的读写分离。\n14. 封装全局 Axios 请求实例，添加全局请求拦截和全局异常响应处理器，减少重复的状态码判断、提升项目可维护性。\n\n\n\n## 尚医通微服务项目\n\n1. 基于 Spring Cloud + Nacos 实现项目的微服务化，划分项目为公共、用户、订单等服务，提高项目的可扩展性和容错性。\n2. 使用 Spring Data 注解实现自动 Redis 缓存，并通过自定义 Redis Key Generator 来根据类和方法自动生成 key，降低开发成本、避免 key 冲突。\n3. 使用 Spring Cloud Gateway 实现微服务请求转发，并在网关层全局解决跨域、用户鉴权、黑白名单、内网服务保护等问题，降低开发成本、提高安全性。\n4. 提供 Restful API 供外部系统接入并上报数据，并通过 API 签名认证保障了接口的安全性。\n5. 使用 JWT 实现单点登录，并支持手机验证码、OAuth2 微信扫码登录，提高用户真实性和登录安全性\n6. 对接微信支付 API 实现预约付款，并通过全局唯一 id 以及支付 / 退款记录表的设计保证了支付操作的幂等性\n7. 使用 MongoDB 代替 MySQL 存储读多写少的半结构化数据（如医院信息），实测查询性能提高 xx%。（自己用 JMeter 测试一下）\n8. 基于 Docker 快速搭建项目依赖服务（如 RabbitMQ），并通过 Docker log 命令查看日志，降低本地开发运维成本。\n9. 为应对流量高峰，使用 RabbitMQ 将下单减库存等耗时操作异步化，提升下单接口单机 QPS（xx 至 xx）\n10. 使用 Spring Scheduler 实现定时预约提醒功能，并使用 RabbitMQ 实现定时服务和通知服务的解耦，提高服务可维护性。\n11. 使用 Nuxt 框架实现服务端渲染，提高网页首屏加载速度（xx 秒至 xx 秒）。\n\n\n\n## 黑马点评\n\n项目介绍：\n\n基于 Spring Boot + Redis 的店铺点评 APP，实现了找店铺 => 写点评 => 看热评 => 点赞关注 => 关注 Feed 流的完整业务流程。\n\n\n\n主要工作：\n\n1. 短信登录：使用 Redis 实现分布式 Session，解决集群间登录态同步问题；使用 Hash 代替 String 来存储用户信息，节约了 xx% 的内存并便于单字段的修改。（需要自己实际测试对比数据，节省内存的原因是不用保存序列化对象信息或者 JSON 的一些额外字符串）\n2. 店铺查询：使用 Redis 对高频访问店铺进行缓存，降低 DB 压力同时提升 90% 的数据查询性能。\n3. 为方便其他业务后续使用缓存，使用泛型 + 函数式编程实现了通用缓存访问静态方法，并解决了缓存雪崩、缓存穿透等问题。\n4. 使用常量类全局管理 Redis Key 前缀、TTL 等，保证了键空间的业务隔离，减少冲突。\n5. 使用 Redis 的 Geo + Hash 数据结构分类存储附近商户，并使用 Geo Search 命令实现高性能商户查询及按距离排序。\n6. 使用 Redis List 数据结构存储用户点赞信息，并基于 ZSet 实现 TopN 点赞排行，实测相对于 DB 查询性能提升 xx%。（需要自己实际测试对比数据）\n7. 使用 Redis Set 数据结构实现用户关注、共同关注功能（交集），实测相对于 DB 查询性能提升 xx%。（需要自己实际测试对比数据）\n8. 使用 Redis BitMap 实现用户连续签到统计功能，相对于传统关系库存储，节约 xx% 的内存并提升 xx% 的查询性能。（需要自己实际测试对比数据）\n9. 在系统用户量不大的前提下，基于推模式实现关注 Feed 流，保证了新点评消息的及时可达，并减少用户访问的等待时间。\n10. 优惠券秒杀：使用 Redis + Lua 脚本实现库存预检，并通过 Stream 队列实现订单的异步创建，解决了超卖问题、实现一人一单。实现相比传统数据库，秒杀性能提高了 xx%。（需要自己实际测试对比数据）\n\n\n\n再列举一些该项目可以扩展的点，有能力的同学可以自己尝试实现**（注意，没有自己实现过千万别写到简历上！！！做没做过一问便知）**：\n\n1. 使用 Redis + Token 机制实现单点登录（补充到上述第 1 点中）\n2. 对 Redis 的所有 key 设置 N + n 的过期时间，从而合理使用内存并防止缓存雪崩；针对热点店铺缓存，使用逻辑过期（或自动续期）机制解决缓存击穿问题，防止数据库宕机。\n3. 使用 Redis 的 Geo + Hash 数据结构分类存储附近商户，并使用 Geo Search 命令实现高性能商户查询及按距离排序，实测相对于传统 DB 查询 + 业务层计算的方式，性能提升 xx%。\n4. 使用 Redis Set 数据结构实现用户关注、共同关注功能（交集），实测相对于 DB 查询性能提升 xx%，并使用 Redis AOF + 业务层日志防止关注数据丢失。（理解 AOF 和 RDB 持久化机制后再写这点）\n5. 基于 Spring Scheduler 实现对热点数据的定期检测和缓存预加载，提升用户的访问体验，并通过 Redisson 分布式锁保证集群中同一时刻的定时任务只执行一次。\n6. 关注 Feed 流可以改为推拉结合模式（活跃用户用推、普通用户用拉）\n7. 使用哨兵集群来提升 Redis 的读并发量、可用性和稳定性；或者使用 Redis 分片集群来提升 Redis 读写并发量、总存储容量，保障可用性和稳定性。\n8. 随着系统用户增多，使用 Redis HyperLogLog 代替 DB 来实现店铺和点评的 UV 统计，提高 xx% 的查询分析性能并解决 xx% 的内存空间。\n\n\n\n## 硅谷课堂 - 在线学习平台\n\n项目介绍：\n\n基于微服务的在线学习平台，分为公众号前台和 PC 端管理后台，实现了课程发布、信息展示、发券、下单支付、在线点播、观看直播、统计分析的完整业务流程。\n\n\n\n这个项目由于大量对接了第三方服务，所以亮点相对不是很多\n\n\n\n主要工作：\n\n1. 基于 Spring Cloud + Nacos 实现项目的微服务化，根据功能和依赖关系划分出用户、点播、直播、公众号管理、公共服务等模块，并根据服务进行分库，提高项目的可扩展性和容错性。\n2. 使用 Spring Cloud Gateway 实现微服务请求转发，并在网关层全局解决跨域、用户鉴权、黑白名单、内网服务保护等问题，降低开发成本、提高安全性。（注意，这句话是 Spring Cloud Gateway 万用金句，但在这个项目中只用到了请求转发和解决跨域）\n3. 使用第三方对象存储来集中存管课程及用户图片，并通过限制大小、校验后缀等方式预防文件上传漏洞，增强安全性。\n4. 使用 WxJava SDK 代替 HttpClient 方式实现 OAuth2 微信授权登录、公众号菜单管理、模板消息推送，节省开发时间。\n5. 为降低开发成本，接入第三方视频点播和直播服务（xx 平台），并将官方 SDK 封装为 Service 实现复用。 \n\n\n\n再列举一些该项目可以扩展的点，有能力的同学可以自己尝试实现**（注意，没有自己实现过千万别写到简历上！！！做没做过一问便知）**：\n\n1. 使用第三方对象存储来集中存管课程及用户图片，并通过压缩、数据降冷等方式降低约 30% 的存储成本。（可以参考这篇文章进行学习和实践：https://cloud.tencent.com/document/product/436/50201，可以自己在 Java 代码层面实现压缩，也可以利用对象存储自带的图像处理能力）\n2. 使用 Mockito 来模拟文件上传等依赖了第三方服务的方法，从而提高系统的单元测试覆盖度，保证系统质量。\n\n\n\n## YuIndex Web 终端项目\n\n1. 基于 Vue 3 + Vite + Ant Design 实现响应式 web 终端页面；基于 Node.js Express + Sequelize ORM 实现后端\n2. 考虑到系统较复杂，自主设计 web 终端、命令系统以及命令集 3 个子系统，使得整个系统逻辑清晰、职责分明\n3. web 终端模块：采用 Vue3 Composition API 向终端集成历史命令、提示、快捷键等功能，使系统更易于维护\n4. 命令系统：采用匹配 => 解析（getOps 库） => 执行机制实现，并通过递归的方式实现子命令解析\n5. 命令集：采用注册机制来维护命令集，并通过 TypeScript 来规范命令的定义，统一开发标准，减少代码冲突\n6. 为了更方便地管理用户配置（比如背景、提示语），使用 Pinia 全局管理器，实现多组件复用变量以及 LocalStorage 自动持久化\n7. 为了防止频繁输入提示影响页面的性能， 使用 Lodash 库的防抖功能，减少用户输入的卡顿感\n8. 引入 Axios、Dayjs 插件并二次封装为前端插件集，实现了多环境、全局统一的配置，不用重复定义接口地址等\n9. 使用 ESLint + Prettier + TypeScript 配合 IDE 实现语法提示，统一项目规范，减少开发中的错误\n10. 仿 Linux 命令 **自实现文件系统** ，封装为空间命令，可以像管理文件一样管理已收藏的网站\n\n\n\n## SQL 代码 + 数据生成器\n\n### 前端\n\n建议是放上项目地址\n\n（多体现自主性，体现你的组件封装复用能力）\n\n1. 封装代码编辑器插件\n2. ant design 的基础上，封装动态、嵌套、折叠表单组件\n3. 封装抽屉、列表卡片等组件\n4. 通过响应式变量 + Ant Design Col 组件传参的方式，实现动态切换布局，避免了重复渲染\n\n\n\n### 后端\n\n1. 为了便于生成器服务针对不同类型的输入进行处理，定义统一 Schema 类，使项目更易于维护、提升开发效率\n2. 门面模式：GeneratorFacade（便于调用）。针对前端不同类型的代码生成，使用门面模式依次调用各种生成器并封装为统一的返回结果，便于前端调用和理解、减少重复请求。\n3. 工厂模式 + 单例模式。为节省每次调用时创建生成器的开销，使用工厂模式 + 单例模式（饿汉式）来统一根据参数生成不同类型的生成器对象。\n4. 其中，对于 SQL 代码生成器（SqlBuilder），使用方言来支持不同的数据库类型（策略模式），并使用单例模式 + 工厂模式创建方言实例（懒汉式）。\n5. Freemarker 模板引擎，并且通过自定义模板引擎配置 Bean（单例模式）来复用对象，节约内存开销\n6. 为了实现根据用户传入的 SQL 来生成代码的功能，利用 Druid 库中的 Parser 工具类来实现 SQL 语法解析，并且针对语法解析中的各种异常做了处理。\n7. dataFaker 库实现随机数生成，并且封装了随机数生成工具类，能根据用户传入的枚举值生成不同的数据，便于调用",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 37,
        "thumbNum": 2,
        "favourNum": 4,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-04-24T09:36:57.000+00:00",
        "updateTime": "2023-05-06T08:25:02.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1310,
          "coin": 170,
          "followeeNum": 601,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-17T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-05-06T10:09:53.000+00:00"
        },
        "tags": [
          "文章",
          "简历",
          "项目",
          "求职"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1650433438420873217",
        "title": "程序员写简历指南（保姆级）",
        "description": null,
        "content": "> by [程序员鱼皮知识星球](https://yupi.icu)，请勿对外公开！！！\n\n\n\n在找他人修改简历之前，请先把本篇文章 **一字不差地完整阅读一遍** ，并且根据本文的建议先自行修改，从而节省彼此的时间，感谢！\n\n\n\n## 写在前面\n\n### 简历有多重要？\n\n简历是一个人求职的门面，也是整个求职过程中的 **第一步** 。如果简历不过关的话，后面的笔试、面试可能连机会都没有！\n\n好的简历不仅能帮助你拿到面试机会，增加面试官的好感度。还能通过适当的内容引导来帮助你在面试中 **出奇制胜** 。\n\n\n\n### 什么时候准备简历？\n\n**千万不要等到找工作前才开始准备简历！**真正好的简历不是一两天就能包装出来的，而是通过个人长期以来的积累、不断发掘并改进自己的不足、经过了多个版本的持续优化后才凝练而成的。\n\n在你学完基础的开发技能，比如开发框架（前端 Vue、后端 SpringBoot 等），并且能够独立运用所学技术来完成一个属于自己的项目之后，就可以开始准备简历了。一般是学编程 6 个月到 1 年左右就可以开始准备了，写简历的过程也是帮助自己对当前的状态和学习进度、不足有个清醒的认识。\n\n**正所谓有积累，才能锋芒毕露。**\n\n\n\n如果你现在不想准备简历也没关系。很多公司会在 8 月份正式开启秋招，所以大家在 6 - 7 月份的时候准备好简历就没问题；很多大厂会在 2 - 3 月份开启春招，所以大家参加春招的话尽量在 2 月份准备好简历。\n\n\n\n## 简历文件\n\n### 简历模板\n\n一份优秀的简历必须在 **外观和内容** 上都很出色，做到秀外慧中。所以，挑选一个好的简历模板是至关重要的！\n\n网上有大把大把的简历模板、还有什么几百套简历大全之类的，让人眼花缭乱。\n\n**其实完全没有必要在简历模板上纠结！**\n\n只要保证简历结构是从上到下、布局清晰、排版整齐、简洁干净就好。\n\n✅ 推荐：\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1653222321128-19eb2a7c-76b3-4d79-9eab-306d1eb445b7.png)\n\n❌ 不推荐：\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1653222390118-88d04776-2643-4cfe-b6c0-dce58095d9d9.png)\n\n\n\n### 简历制作方法\n\n最省事的方法：使用 Typora + Markdown 来编写简历并导出为 PDF。\n\n\n\n在线免费制作简历：https://www.wondercv.com/\n\n\n\n直接给大家安利一份我自己用过的、非常精简整齐的免费简历模板：https://www.wondercv.com/jianlimoban/jqZb6WM.html\n\n也是超级简历网站上的，可以灵活自定义内容，基本能满足所有同学写简历的需求，大家不用浪费时间在选模板上了~\n\n\n\n再分享一下鱼皮大学时使用的简历模板：https://pan.baidu.com/s/1eE6mgMpK3NkD8M82acK1gA 密码：8vai\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1653223455234-34e0bcc5-b61c-4454-b938-290af5c7d918.png)\n\n\n\n### 文件命名\n\n命名没有绝对的规范，但是要 **仔细查看岗位描述** 是否有文件名规则的要求。\n\n如果没有要求的话，可以用：求职岗位_个人姓名_求职类别.pdf（实习生还是正式员工）\n\n千万别用什么特殊符号啊、一大串数字之类的无意义内容！\n\n\n\n### 文件格式\n\n⚠️ 注意！文件格式一定要用 PDF！！千万不要用 Word！！！因为使用 Word 可能会出现预期之外的排版错乱，这个影响是致命的。 \n\n建议同时提供 PDF、Word 两种格式的文件，便于对方选择。\n\n\n\n## 简历内容\n\n### 整体\n\n一份完整的程序员简历包含个人信息、教育背景、专业技能、荣誉奖项、工作经历、项目经历、科研经历、校园经历、个人优势等内容。\n\n其中，个人信息、教育背景、专业技能、项目经历是 **必须具备** 的！\n\n一般校招简历以 **一页纸** 为最佳（工作 3 年以上经历非常丰富、或者求职等级较高除外），因此要合理分配各部分内容占用的篇幅，推荐的占比如下：\n\n- 个人信息 5 ~ 10%\n- 教育背景 10 ~ 15%\n- 专业技能 20 ~ 30%\n- **项目经历 30 ~ 40%**（工作 / 校园 / 科研等经历也算在内），对大多数同学来说，这部分是 **核心** ！\n- 其他内容 0 ~ 20%（比如奖项、个人优势等）\n\n\n\n### 个人信息\n\n基本信息必须要 **填写完整** ，这是对另一方最基本的尊重。包括以下信息（加粗为必填项）：\n\n- **姓名**\n- **性别**\n- **求职意向**\n- **年龄**\n- **身份：**大几学生、几年工作经验等\n- **联系方式：手机号、邮箱、微信**、QQ 号（以公司岗位描述要求为主）\n- 照片（建议放）\n- 其他链接：个人博客、作品集、亮眼作品等\n\n\n\n#### 技巧\n\n1）个人信息占用的篇幅不用过多，一行可以同时写多个信息，保证间距合理即可。\n\n✅ 推荐：同类信息可以放到一行\n\n联系方式：手机号：xxxxxx / QQ 号：xxxxx\n\n\n\n❌ 不推荐：\n\n姓名：李鱼皮\n\n贵庚：23\n\n联系方式：手机号：xxxxxx\n\nQQ 号：xxxxx\n\n个人兴趣：敲代码、水视频\n\n\n\n2）照片要清晰端正，蓝底 / 白底 / 红底都可以，最好表情自然、面带微笑。尽量穿白衬衫或者正装：\n\n✅ 推荐：\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1653229411748-7913e286-7360-4fe3-88a3-61274ccbafe5.png)\n\n❌ 不推荐：\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1653229373809-2034c3fd-c16e-4dba-828c-e43f2026964c.png)\n\n\n\n3）没有特殊要求的情况下，不建议写期望薪资！一方面是大公司的薪资还算公开透明，没必要写；另一方面是防止你的表现超出了预期时，被人按照你的预期薪资来砍价。当然，除非你把预期写的很高，说不定能过滤一些公司、猎头的打扰。 \n\n\n\n4）如果有个人网站、个人博客、代码仓库的话，建议补充上相关链接\n\n✅ 推荐：比较精简、简短、**好输入**\n\n比如：yupi.icu\n\n❌ 不推荐：过于复杂的链接\n\n比如：https://blog.csdn.net/weixin_41701290?spm=1000.2115.3001.5343\n\n\n\n### 教育背景\n\n**如实** 写明即可，包括以下信息：\n\n- 学校\n- 专业\n- 年级\n- 入校时间 ~ 毕业时间\n- 排名（建议排名高于前 20% 的同学才写）\n- 主修课程（建议非计算机相关专业的同学适当列举，优先列举和求职岗位相关的、分数较高的课）\n- 其他信息：如 CET 证书、计算机专业相关证书等\n\n\n\n#### 技巧\n\n1）学历一般不建议造假！\n\n2）如果有得分较高的（比如 90 分以上）、和岗位相关的课程，可以在课程名后用括号补充分数。\n\n\n\n### 专业技能\n\n同义词：个人技能、技术栈、技能清单\n\n\n\n这部分是简历的核心之一，列举自己掌握的、熟悉的、用过的、学过的、甚至仅了解过的各种技术或技能。\n\n#### 技巧\n\n1）写你会的技术栈时，不要用老长一句话、像报菜名似的列举技术名词。可以采用列表的形式把每一个技术单独写清楚，会更直观清晰。\n\n\n\n举个例子：\n\n❌ 不推荐：把各种不相关的技术用一句话讲完\n\n能够熟练使用 springcloud 微服务框架及 mysql、redis、hbase、mongodb 等数据库及 kafka、rabbitmq 等消息中间件及 netty 等网络框架、前端 HTML / CSS / JavaScript 的使用。\n\n\n\n✅ 推荐：改为列表，**同一类技术写在同一行**\n\n- 熟练使用 springcloud 微服务全家桶\n- 熟练使用 mysql、redis、hbase、mongodb 等数据库和大数据中间件\n- 熟练使用 kafka、rabbitmq 等消息中间件\n- 熟悉 netty 等网络框架\n\n\n\n2）每点不要只写一个技术名词，建议多补充该技术中你掌握的知识点和技术细节\n\n\n\n❌ 不推荐：写的很通俗、很广泛、很空虚\n\n- 熟悉 Java（熟悉 Java 的什么特性？）\n- 熟悉 Linux 系统的基本命令（熟悉什么命令？）\n\n\n\n✅ 推荐：补充一些该技术中，你用的比较熟悉的知识点、技术细节\n\n- 熟练使用 Java，比如：集合框架、动态代理机制、反射等等\n- 熟悉 Linux 系统（比如文件系统、内存管理），能使用命令监控系统负载和进程状态\n\n\n\n3）除了写自己会什么技术外，最好 **深一度**。比如可以补充半句：**你能用这些技术做什么？** 从而表现出你的实践能力，公司倾向于选择问题解决能力强、实践经验丰富的同学。\n\n\n\n❌ 不推荐：只写理论，不写实践\n\n熟悉 Java\n\n✅ 推荐：你能用这个技术做的事、你亲身实践过的事\n\n熟练使用 Java，能够运用 Java8 的 Stream API 高效操作集合类 / 完成数据处理、使用动态代理完成对相似类的统一操作\n\n\n\n其他例子：\n\n- 熟练使用 springcloud 微服务全家桶，**能独立开发微服务项目**\n- 熟悉 netty 等网络框架，**能够独立开发即时通讯系统**\n\n\n\n### 荣誉奖项\n\n> 同义词：个人奖项\n\n\n\n包括以下信息：\n\n- 个人证书\n- 个人参与并获奖的竞赛（团体奖项也要写，但是最起码你要有贡献）\n- 非编程相关也可以写（比如某某创业大赛，总比没有好）\n- 软著、专利\n\n\n\n#### 技巧\n\n1）对奖项排序，优先把认可度高的、范围高的、获奖级别高的、和编程求职岗位更相关的放上面。\n\n\n\n### 工作经历\n\n> 同义词：实习经历\n\n\n\n包括以下信息：\n\n- 公司名\n- 职务\n- 工作起始和结束时间\n- 工作内容（具体做了什么）\n- 负责的项目（做哪个方向的项目、项目的介绍）\n- 给公司带来的价值（收益增加、成本降低、更稳定）\n\n\n\n#### 技巧\n\n1）写工作内容的时候尽量突出自己的地位，比如：\n\n❌ 不推荐：\n\n参与文档编写\n\n✅ 推荐：\n\n负责整个接口文档设计和编写\n\n\n\n2）写工作内容时，可以适当具体一些，尤其是建议补充一下工作中用到的技术\n\n❌ 不推荐：职责比较模糊\n\n参与系统开发\n\n✅ 推荐：点明技术，体现实践经历和能力\n\n负责 SpringBoot 前后端分离架构的系统研发\n\n\n\n3）尽量不要写自己收获了什么、学到了什么，而是写自己做了什么、做出了什么成果，更有说服力。\n\n\n\n### 项目经历\n\n> 同义词：个人项目、项目经验\n\n\n\n这部分是简历的 **核心** ，主要是介绍自己做过或者参与过的项目和工作，**体现出自己的实践经验和能力** ，包括以下信息：\n\n- 项目名称\n- 项目起止时间\n- 项目介绍\n- 项目技术栈或架构\n- **负责工作**（或者个人职责，这里是重点）\n\n\n\n只要是自己做过的项目都可以写，只不过可以区分重点和非重点。\n\n\n\n注意，项目经历和实习 / 工作经历的侧重点不完全相同：\n\n- 实习经历重点是你在这家公司负责什么（地位）、你的作用、你的价值。\n- 项目经历重点在于你对这个的项目的贡献、项目特色、实现项目的关键技术等。\n\n\n\n#### 技巧\n\n1）注意每个项目里内容的比重，项目介绍占比不要太多，不要写得太啰嗦！重点在于突出你做了什么，用什么技术解决了什么问题，带来了什么效果。\n\n\n\n❌ 不推荐：项目介绍过多，自己的工作反而没写多少\n\n项目介绍：\n\n1. 将 SQL 的编写逻辑 结构化 ，像写文章大纲一样编写和阅读 SQL\n2. 重复的 SQL 只需编写一次 ，SQL 变动时修改一处即可\n3. 可以针对某部分 SQL 进行传参和调试\n4. 查看 SQL 语句的引用树和替换过程，便于分析理解 SQL\n\n负责工作：使用 Vue3 + Monaco Editor 完成系统开发\n\n\n\n✅ 推荐：项目介绍一两句话带过，突出核心，更多的篇幅在于写自己做的事\n\n项目介绍： 用 JSON 生成结构化的 SQL 语句的在线工具，基于 Vue3 + TypeScript + Vite + Ant Design + MonacoEditor 实现\n\n负责工作：\n\n1. xxx\n\n2. xxx\n3. xxx\n4. xxx\n\n\n\n2）介绍项目的时候，不要混在一起，而是建议 **分点逐行、具体去写** ，每个工作 / 亮点独占一行，每一点 **尽量具体** 。写的越具体，往往越体现真实性。\n\n\n\n这里有个万能公式：负责 XX 系统的研发，在 xx 条件下、利用 xx 技术实现了 xx，**实测** 带来了 xx 效果（比如推进了 xx、提升了 xx）。\n\n\n\n> “实测”两个字突出了真实性。\n\n\n\n举个例子：负责订单查询系统，在老系统并发量较低的情况下，选用分库分表中间件 + Kafka 消息队列 + Redis 缓存进行重构，提升了系统并发量，**实测** 由 1000 Qps（每秒并发数）提升至 10000 Qps。\n\n\n\n❌ 不推荐：不够具体，千篇一律\n\n使用 Redis 缓存热点数据，提高系统查询性能\n\n> 缓存哪些数据？哪些数据是热点？缓存效果如何？提高了多少查询性能？\n\n\n\n✅ 推荐：\n\n负责商品模块，在现有商品查询接口并发量较低的情况下，在数据库查询前增加 Redis 缓存层，缓存热点商品信息，使用 apache-ab 实测接口并发由 50 qps 提升至 1000 qps。\n\n> 还可以进一步补充缓存更新等问题的解决。\n\n\n注意！实在没有背景和效果实测，也不要硬编，被识破了会很尴尬。\n\n\n\n3）要想项目有亮点，需要 **深一度**。不能只写你完成了什么工作，而是要有一定的优化和扩展。比如你可以改造现有项目 / 框架、推陈出新，提升系统各方面的性能（可用性、稳定性、用户体验、吞吐量、时延等）。\n\n\n\n❌ 不推荐：\n\n开发了订单系统，完成了支付模块。\n\n\n\n✅ 推荐：体现出了技术选型和架构思维。\n\n负责订单系统的开发，使用 XX 技术实现了支付模块，并选用 XX 消息队列将系统 QPS 由 XX 提升至 XX，同时使用 XX 保证了支付的幂等和稳定性。\n\n\n\n4）建议大家多去了解你项目中用到的技术的同类技术，对这些技术的优缺点和适合的应用场景有个大致的印象。这样做的好处有很多：\n\n1. 开拓你的思路\n2. 在写项目介绍时可以补充技术对比细节，体现出你的技术选型能力和知识广度\n3. 防止面试官考察“你为什么用这个技术，不用那个技术？”之类的问题\n\n\n\n5）条件允许的话，强烈建议提供可在线访问的项目地址（域名尽量简短，好让面试官访问），从而体现你项目的真实性，将会是一个非常不错的加分项。\n\n\n\n因为绝大多数同学写项目经历的时候，不放已上线的项目地址。有的时候你写的点再多、吹得天花乱坠，都不如直接放一个可访问的项目地址来得实在，能够直接证明你真的做过这个项目、从而体现你的项目经验。对于前端同学来说这点更重要，直接给面试官看体验效果最实在。你做的网站用不用心，一看便知。\n\n\n\n10 份简历里有 8 份都不写线上项目地址的，所以这 10 位同学同时去投递，可能只有另外 2 位写了项目地址的同学有机会进入面试。\n\n\n\n不过我估计大多数同学是根本就没有上线过项目，建议大家还是静下心来，去看一下星球用户中心项目最后两期的直播回放（https://t.zsxq.com/0bSRkCA5D），把上线的流程跑通，其实并不难。\n\n\n\n6）如果你做的是网上大众化的教程项目，建议给项目改个名、换个皮、自主加一些新功能，增加区分度。\n\n\n\n#### 参考写法\n\n> 仅提供思路，尽量不要直接照搬！\n\n\n\n可以从技术自身的优点和应用场景出发，来增加亮点。\n\n\n\n以用户中心项目为例：\n\n1. 为了提高开发效率，选用 Ant Design Pro 脚手架快速搭建基础页面，并对原始模板进行瘦身、抽象为可复用的公共模板，便于后续同类项目的快速研发。\n2. 在脚手架自带的 umi-request 请求库基础上进行改造和封装，添加全局请求拦截和全局异常处理逻辑、自动根据项目启动命令来区分环境，减少重复代码、提升项目可维护性。\n3. 选用 MyBatis + MyBatis-Plus 进行数据访问层开发，复用大多数通用方法，并且通过继承定制了自己的 **通用操作模板** ，大幅提升了项目开发效率。 \n4. 为了明确接口的返回，自定义统一的错误码，并封装了 **全局异常处理器** ，从而规范了异常返回、屏蔽了项目冗余的报错细节。\n5. 对于项目中的 JSON 格式化处理对象，采用 **双检锁单例模式** 进行管理，从而复用对象，避免了重复创建对象的开销，便于集中维护管理。\n6. 采用 Nginx 完成前端项目部署、采用 Docker 容器完成后端项目部署，并且使用宝塔面板对项目进行运维监控。\n\n\n\n#### 如何增加项目亮点？\n\n可以试试下面的方法：\n\n1.  大家去网上随便找一套面试题（也可以在星球语雀知识库 => 资源汇总里找到），遇到看不懂的题目或者没接触过的知识后，把它记下来 \n2.  针对这道题目到全网去搜题解，至少看 3 份不同的讲解以得到相对正确的解答 \n3.  想办法把这个面试题涉及的知识点应用到项目中 \n4.  在简历上补充项目经历，将自己对这个知识点的实践作为一个亮点 \n\n\n\n为什么要这么做呢？\n\n1.  看别人整理的面试题，快速 get 【企业关注的】、并且自己不熟悉的技术知识，扩展思路，而不是受限于视频教程 \n2.  看题解，了解这个知识的概念、应用场景、使用方法、细节和优化点 \n3.  趁热打铁，直接对理论进行实践，真正把知识变成自己的 \n\n\n\n举个例子，比如我学后端的，刚学完 Redis 中间件，那我去搜搜 Redis 面试题，搜到一个【如何用 Redis 解决缓存雪崩？】。然后我去看题解，比如：https://blog.csdn.net/m0_37647376/article/details/118914551（随便找的一篇），了解到：缓存雪崩是什么？如何解决？然后我就把缓存雪崩的解决方案应用到项目中，比如【随机过期时间】这种方案（大 N + 小 n），给每个缓存过期时间补充一个 2 分钟以内的随机数，避免缓存集中失效~ 没错，就加个随机数这么简单！然后我就可以把这个点写到简历上啦~ 这样面试官问你这道题目的时候，你可以很自信地说自己实践过！也会对这道题目印象更加深刻。\n\n\n\n再举个前端的例子，比如搜到一题【什么是虚拟列表？】，然后去看题解：https://juejin.cn/post/6844903982742110216，了解到：虚拟列表是什么？为什么要用虚拟列表？怎么实现虚拟列表？然后就可以自己实现一个虚拟列表、封装成一个独立的组件，可以应用到自己的前端表格项目中，还可以开源~ 然后就可以很骄傲地写到简历上。面试官：啥是虚拟列表？我：劳资写过，甚至还有开源项目！\n\n\n\n**这其实正是企业中开发项目常见的做法，搜解决方案、实践应用、分析和总结。**\n\n\n\n#### 如何挖掘项目亮点？\n\n一段有亮点的项目经历绝对不能只写 “用 xx 技术完成了 xx 功能”，而是要有起伏和递进，在完成某功能的基础上进一步 **优化** 。\n\n\n\n应该优化什么呢？可以从以下角度出发：\n\n1）性能：页面加载速度、接口并发量（qps / tps）、接口响应时长等\n\n方法：缓存、并发编程、异步、限流降级熔断、有损服务、CDN、数据压缩等\n\n\n\n2）成本：节约系统资源、降低 CPU / 内存 / 磁盘空间 / 带宽占用、节省机器数等\n\n方法：人工分析删除、定期删除、低频存储、淘汰策略、数据压缩等\n\n实际开发项目中，一定要有成本意识！很多同学光说优化，不考虑实际情况，这是一个错误的思维。\n\n\n\n3）可用性：尽可能地提高系统对外提供服务的时长，即提高 SLA（3 ~ 5 个 9 的高可用）\n\n参考文章：https://blog.csdn.net/terrychinaz/article/details/112976266\n\n方法：集群、主备、自动故障恢复、监控告警、容灾\n\n\n\n4）可靠性：尽可能地让系统提供可靠的服务，不要出现崩溃中断\n\n方法：集群、主备、异常处理、降级、容灾\n\n\n\n关于可靠性和可用性的区别：https://blog.csdn.net/HermitSun/article/details/92164226\n\n\n\n5）稳定性：接口响应 / 操作处理时长相对固定，成功率高，响应结果保持正常\n\n方法：保证每个服务节点状态正常、性能相当（不要有的机器好有的机器垃圾导致接口时快时慢）；合理规划服务调用链路，不能过长；做好技术选型，避免使用不稳定的第三方依赖\n\n\n\n6）容错性：部分节点（服务）出问题时，系统整体依然能够正常提供服务\n\n方法：集群、反向代理、故障转移\n\n\n\n7）健壮性：系统不会因为部分异常而整体崩溃\n\n方法：异常处理、进程监控（如 supervisor）\n\n\n\n8）系统复杂度：整个系统易于理解，而不是说前人离职、后人无法接手\n\n方法：软件开发原则、设计模式、系统架构设计（如微服务）、开发规范、工作流\n\n\n\n9）可维护性：使整个系统结构清晰、利于维护，出了问题也能够快速排查\n\n方法：软件开发原则、设计模式、系统架构设计（如微服务）、开发规范、工作流、抽象复用（组件化模块化）\n\n\n\n10）可扩展性：使整个系统能够轻松应对未来新增的需求及业务增长，不会牵一发而动全身\n\n方法：设计模式、架构设计、集群、分库分表、技术选型\n\n\n\n11）可观测性：能够随时观察了解系统 / 服务的运行状态、并能快速发现故障和定位异常\n\n方法：系统埋点上报、监控告警（prometheus）、ELK 日志收集、可视化分析（Grafana）\n\n\n\n12）可伸缩性：系统根据负载情况动态增加或减少节点，从而能够应对流量高峰、并在空闲时节约成本\n\n方法：K8S + Docker 容器、云原生\n\n\n\n13）用户体验：符合用户的使用习惯、提升用户对网站的满意度\n\n方法：网页性能优化、接口性能优化、懒加载、占位符、骨架屏、设备适配、浏览器兼容性、满意度调研（如 NPS）\n\n\n\n14）安全性：保证机器、服务、数据库、网络等不被恶意侵入和污染，保证数据和用户隐私的安全\n\n方法：参数校验、常用安全措施（防 XSS、CSRF、SQL 注入等）、网络防护（反 DDOS）、反爬虫、限流、黑白名单、防火墙等\n\n\n\n#### 项目亮点参考\n\n鱼皮也给大家总结了一些可以写在简历上的项目亮点：https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/ieo5g3。\n\n**仅供参考，保证自己能 hold 住再写，不要无脑搬运！**\n\n\n\n### 科研经历\n\n包括以下信息：\n\n- 研究内容（论文、专利、实验室等）\n- 研究时间\n- 具体工作\n- 产出（著作权、论文、认可度）\n\n\n\n### 校园经历\n\n包括以下信息：\n\n- 名称（你做的事情、参与的活动）\n- 时间\n- 具体工作\n- 产出\n\n\n\n### 个人优势（自我评价）\n\n请阅读这篇文章：https://mp.weixin.qq.com/s/q4JXAtBjCmEaUDQ_tj_IJA\n\n这个板块不是必须要写的，如果你要写，就 **必须让你的自我评价有信服力** ！不要只说自己哪里的能力强、怎么怎么厉害，而是需要一些事例、数据、证据来证明。\n\n\n\n举些例子：\n\n1. 我学习能力强，对新技术有强烈的好奇心 => 补充：曾通过官方文档、自主查阅资料自学了 XX、XX 新技术，并通过 RSS 持续关注该技术最新动态。\n2. 我乐于从事有挑战性的工作 => 补充：我曾经担任 XX 队长，在 XX 困难的条件下，解决了 XX 问题，取得了 XX 成果。\n3. 我喜欢分享知识、善于总结 => 补充：连续 XX 天发布个人博客，发布过 XX 个学习总结等等\n4. 我很帅 => 补充个人照片\n\n\n\n这样写自我评价，就不再是虚的了，而是真的能让对方感受到你的这些能力。\n\n这里有个小技巧，可以根据目标公司的岗位要求去写自我评价，做到对号入座。\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1678440086802-f3ccf74d-c23c-435c-94cb-399e4072b4aa.png)\n\n比如公司要求招有团队协作经验的，那就写：我善于团队合作，曾经组队参与 XX、XX 项目，统筹负责了 XX、XX，怎么提升团队工作效率之类的。。。\n\n这样从招聘者的角度来看，你是有用心准备过的，目的性明确，也是加分项。\n\n\n\n## 写简历建议\n\n目标：在真实的前提下锋芒毕露，将有限的积累 **无限放大** ，向面试官表达出 “我很主动、我自学能力很强、能够胜任工作” 等信息，从而吸引面试官。\n\n\n\n### 基本建议\n\n1. 内容划分清晰、完整全面，简历通常包括几个部分：个人简介（基本信息、照片、学校、专业、成绩、四六级证书、特长介绍等）、竞赛奖项、个人技术栈、实习经历、项目经历、科研经历等。\n2. 合理划分各部分的比例，多写经历（实习、项目等），少写正确的废话（自我评价）\n3. 简历最好一页纸，内容超出时，过滤一些 “废话”，只放最精华的部分。\n4. 简历的板块划分要清晰、排版要整洁、内容不要太挤或太空；色调不宜过暗或过亮，推荐蓝色或淡灰色；色彩不要太丰富，要让人看起来舒服。\n5. 明确你要找的岗位，简历上的所有内容尽量围绕这一个方向去写，突出重点。（比如你找后端方向的工作，即使你也会前端，也要注意不要让前端占了过多的篇幅）\n6. 依据个人优势对内容进行排序，把最有亮点的部分放上面，还可以适当对关键词进行加粗、调色等，突出自己的优势和亮点，尽量减少和其他同学简历的相似度。和短视频逻辑一样，面试官如果觉得你的简历千篇一律，一下就刷走了。\n7. 文字内容要精炼，拒绝口语化；用词尽量专业，体现专业性，不用担心面试官看不懂。\n8. 项目 / 实习经历介绍中，可用 STAR 分析（场景、任务、行动、**成果**）来梳理自己的核心工作。标准句式：在 xx 公司 xx 项目中，在 xx 情况下，运用 xx 技术，解决了 xx，优化了 xx，达到了 xx 效果，带来 xx 收益等。举个例子：为适应产品特性、加快迭代速度，后端由 **Springboot** 重构至 Node.js ，数据库由 **MySQL** 迁移至 **MongoDB** ，实现了前后一体的 **集中式配置中心** ，提高了接近 **1 倍** 的开发效率。注意每段介绍不宜过长，留给面试官提问的空间。\n9. 简历项目中尽量不要出现重复的内容介绍（比如每个项目都写一遍使用 Axios 发送请求）。\n10. 最好给项目附上可直接访问的链接，有个人博客的话也最好写上去，建议多在博客中记录和总结自己学到的知识，让面试官感受到你的努力积累、脚踏实地。\n11. 写完简历后，一定要自己通读几遍，保证行文通顺、且无任何错别字！尤其是专业名词别拼错了！\n12. 有机会可以多阅读借鉴他人的简历，查漏补缺。\n\n\n\n### 高阶技巧\n\n#### 引导\n\n在写简历时，我们可以故意利用一些措词、加粗等方式来 **引导面试官** 。\n\n比如很多面试官都会针对简历中提到的技术去展开提问。因此当我们介绍技术栈时，可以在一堆 “了解” 中适当添加 “掌握”、“尤其熟悉” 等词，面试官大概率会去问这些技术相关知识点。\n\n此外，还可以 **细化** 你会的技术，比如把 “熟悉多线程” 改成 “掌握多线程  **AQS** 、并发包等技术”，可以吸引火力，一定程度上防止面试官问到多线程中你相对薄弱的部分。在面试准备时间不足时，这个方法可能有奇效。\n\n因此必须熟悉简历中的项目和用到的技术，提前想好对策。常见的问题有：\n\n- 项目中用了哪些技术？\n- 为什么用这个技术不用别的？\n- 有什么亮点？怎么去优化等等？\n\n\n\n现在大多数简历千篇一律，都说自己会 Java、人均 Java 小能手，所以很难吸引到面试官。而如果你提到了 Java 中的某个高级知识点，有一定的学习深度，反而更容易被选中。就和我们平时刷短视频一样，一定是有什么东西吸引我们，才能看下去。\n\n反之，如果简历很平淡，哪怕进入了面试环节，面试官可能也不知道问你什么，只能考各种八股文（胡乱开火扫射）。\n\n\n\n#### 适当包装\n\n写简历的本质就是：**如何以一种吹牛皮的方式表达出你的能力。**\n\n因此，虽然写简历要真实，但不能太老实！尤其是对于没有特别多项目的同学，要学会适当包装、合理包装。\n\n比如将常用的技术进行组合、添加一些修饰词、使用一些专业名词等。\n\n\n\n举个例子，本来写的是：使用了 MySQL 数据库、Redis 缓存、OSS 对象存储技术。\n\n可以改为：使用 MySQL、Redis、OSS 三维一体的多元存储技术。\n\n哈哈，虽说可能有一点点夸张，但还是能体现你的专业性的，不过不要乱吹就是了。\n\n\n\n再举个例子：用 xx 框架提升了 20% 的查询性能，20% 是一个很不显眼的数字，如果你改成 90%，会更抓眼一些，并且对于大部分场合来说是合理的。\n\n\n\n但是注意，**杜绝欺骗** ！尤其是工作年限等有准确数字、可被调查的问题，请实事求是，否则后果自负。\n\n\n\n#### 定制化\n\n根据不同的岗位、公司和 JD（岗位描述）来调整优化简历（比如修改部分细节或工作内容），或者准备多份不同的简历。\n\n比如你前后端都会，投递后端开发岗位时，把后端技术放在前端技术上面去写，项目经历、实习经历等都要侧重于后端。\n\n\n\n## 常见问题\n\n### 1. 项目介绍过长\n\n先给大家看下某份简历中的项目经历部分：\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20220308122946234.png)\n\n\n\n看到这个，不知道大家有什么感受？\n\n\n\n显然，项目介绍占整个项目经历的比重 **过多** ！好家伙，讲了一大堆项目有什么功能，结果自己实际上负责的工作就一个小小的模块？！\n\n\n\n其他的工作既然都不是自己做的，说那么多干嘛呢？如果面试官问你其中某个功能是怎么实现的，说不出来不是很尴尬么？\n\n\n\n在简历中，面试官更关注的是 **你在项目中负责什么、做了什么、怎么通过技术和设计能力去解决问题的** 。至于项目本身的介绍，用一两句话直击核心就好，重点在于交代和你工作有关的内容，其余的可以在面试中展开介绍。\n\n\n\n### 2. 对工作的描述过于宽泛\n\n\n\n你敢相信么？我在几份简历的工作描述中竟然发现了一模一样的内容！\n\n\n\n举个例子：\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20220308123957025.png)\n\n\n\n看看上述简历的【负责的工作】部分，不知道大家会不会有这种感觉，好像我写了什么，又好像我什么都没写。\n\n\n\n换言之，这几句话（完成了 xx）可以原封不动地套在任何一个项目上！对不对？\n\n\n\n面试官根本没办法看出你到底在这个项目中做了什么，只会有一种感觉 —— 你在糊弄。\n\n\n\n所以，不要把负责的工作写得太宽泛，哪怕你真的做了很多事，也可以从中挑亮点去讲。\n\n\n\n### 3. 过于直白\n\n\n\n除了上一点外，很多同学的项目经历部分都比较直白，基本就是用 xx 技术做了 xx，比如：\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20220308130044691.png)\n\n\n\n对于找一般的公司或实习岗位来说，也许这么写就已经足够了。但如果想冲击大厂，这份简历就显得太 “平平无奇”。\n\n\n\n如果有条件（自己做过）的话，不要平铺直述地列举技术和工作，而是要通过一些案例来体现自己的技术、设计能力、自主性等。\n\n\n\n比如：由于项目模块众多、调用链路复杂，选用责任链设计模式重构项目，使各模块职责清晰、项目更易于扩展。\n\n\n\n可以整理出一个 **公式** ：为解决 xx 问题，使用 xx 技术实现了 xx，达到了怎样的效果。\n\n\n\n### 4. 用词不专业\n\n\n\n简历上的每一个词汇，都能够反映出你的水平。\n\n\n\n很多同学的简历用词比较随意，比如 “我用 axios 库完成了对数据库的查询”。\n\n\n\n其实大家都心知肚明，axios 是一个前端请求库，可以和后台进行交互，实现对数据的查询和管理。\n\n\n\n但上面那个表达，语言不够清晰和凝练，还可能会给面试官一种感觉：你真的知道 axios 是什么？你真的和后端联调过么？\n\n\n\n所以，一定要保证简历上的每个词都要 **准确，不能产生歧义** 。另外，尽量减少口语化的内容，不说用 xx 技术做了 xx，而是用（基于） xx 技术实现了 xx。\n\n\n\n### 5. 没有重点\n\n\n\n我认识一些学的技术比较多的同学，他们可能又会 Python 又会 Java 又会前端，写到简历上的项目也是各方向的都有，然后又没有在简历的开头注明 “求职意向”，就导致我完全不知道他要找哪个方向的工作。\n\n\n\n并不是说会的技术、写简历上的技术太多了不好。而是要有一个侧重点，比如找 Java 岗位的工作就把 Java 的项目放最上面，用更多的篇幅去介绍。也建议大家找工作前越早明确方向越好，不要到最后什么都只学了一点，反而平平无奇了。\n\n\n\n### 6. 简历内容重复\n\n简历的项目工作描述中尽量不要出现重复的内容，不仅占用空间，还会让面试官感到疲惫，如下图：\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1657635570983-24c43f9f-7c42-4c1e-a189-957030b1dc9f.png)\n\n\n\n## 专业技能参考\n\n### Java 后端\n\ntodo\n\n\n\n### 前端\n\ntodo\n\n\n\n### 计算机基础\n\n\n\n## 简历问题及建议汇总\n\n鱼皮花了整整 4 个晚上，对最近改过的几百份简历进行了逐一分析和梳理，最终整理出了一份大家写简历时经常出现的问题汇总文档，多达 50 多个高频问题！\n\n\n\n希望大家写简历前，都能一字不差地读完一遍这些问题，相信能够帮大家提升简历回复率。\n\n\n\n### 1、整体\n\n\n\n#### 1.1 简历篇幅过长\n\n\n\n建议：一般校招简历以 **一页纸** 为最佳，保证面试官有耐心看下去。但注意，并不是说强制一页纸，只是希望大家在简历上突出重点、惜字如金，而不是像记流水账一样什么都写。如果你能写的内容就是很多的（比如冲击大厂、工作 3 年以上、求职等级较高），那么一页纸以上完全没问题。\n\n\n\n#### 1.2 简历缺少 XX 板块\n\n\n\n建议：一份完整的程序员简历包含个人信息、教育背景、专业技能、荣誉奖项、工作经历、项目经历、科研经历、校园经历、个人优势等内容。\n\n\n\n其中，个人信息、教育背景、专业技能、项目经历是 **必须具备** 的！\n\n\n\n#### 1.3 简历篇幅不够合理\n\n\n\n建议：合理分配各部分内容占用的篇幅，推荐的占比如下：\n\n\n\n- 个人信息 5 ~ 10%\n- 教育背景 10 ~ 15%\n- 专业技能 20 ~ 30%\n- 项目经历 30 ~ 40%（工作 / 校园 / 科研等经历也算在内），对绝大多数同学来说，这部分是 **核心** ！\n- 其他内容 0 ~ 20%（比如奖项、个人优势等）\n\n\n\n总之，尽量多写经历来体现自己的实践能力、解决问题的能力，少写一些正确的废话（自我评价）。\n\n\n\n#### 1.4 简历模板不够整洁\n\n\n\n建议：一份优秀的简历必须在 **外观和内容** 上都很出色，做到秀外慧中。所以，挑选一个好的简历模板是至关重要的！\n\n\n\n简历的板块划分要清晰、排版要整洁、内容不要太挤或太空；色调不宜过暗或过亮，推荐蓝色或淡灰色；色彩不要太丰富，要让人看起来舒服。\n\n\n\n可以尝试鱼皮自己用过的、非常精简整齐的免费简历模板：https://www.wondercv.com/jianlimoban/jqZb6WM.html\n\n\n\n当然也可以尝试其他模板，只要保证简历的整体结构是从上到下、布局清晰、排版整齐、简洁干净就好，拒绝花里胡哨的色块和图标。\n\n\n\n#### 1.5 简历文件命名或格式不规范\n\n\n\n建议：简历文件的命名虽然没有绝对的规范，但是要 **仔细查看岗位描述** 是否有文件名规则的要求。\n\n\n\n注意！除公司特别要求之外，文件格式一定要用 PDF！！千万不要用 Word！！！因为使用 Word 可能会因为打开软件的版本不同而出现预期之外的排版错乱，这个影响是致命的。\n\n\n\n#### 1.6 简历中出现错别字\n\n\n\n建议：整个简历中千万不要有错别字！尤其是技术名词或者专业术语。否则会给人感觉非常不认真，竞争激烈时搞不好直接就挂了。\n\n\n\n所以写完简历后，一定要自己通读至少 3 遍，保证行文通顺、且无任何错别字！\n\n\n\n#### 1.7 简历没有明确的重点或求职方向\n\n\n\n建议：整个简历一定要有一个明确的、和求职岗位匹配的方向。\n\n\n\n我认识一些学的技术比较多的同学，他们可能又会 Python 又会 Java 又会前端，写到简历上的项目也是各方向的都有，然后又没有在简历的开头注明 “求职意向”，就导致面试官完全不知道他要找哪个方向的工作。\n\n\n\n并不是说会的技术、写简历上的技术太多了不好，而是要有一个侧重点。比如找 Java 岗位的工作就把 Java 项目放最上面，用更多的篇幅去介绍。也建议大家找工作前越早明确方向越好，不要到最后什么都只学了一点，反而平平无奇了。\n\n\n\n当然，如果你自己在多个方向学得都不错，可以准备多份不同的定制化简历，并根据不同的岗位、公司和岗位描述来调整优化简历（比如增加部分细节、调换内容的顺序等）。\n\n\n\n比如你前后端都会，投递后端开发岗位时，把后端技术放在前端技术上面去写，项目经历、实习经历等都要侧重于后端。\n\n\n\n#### 1.8 技术名词大小写错误\n\n\n\n建议：技术名词最好严格控制大小写，比如数据库技术写 “MySQL” 而不是 “mysql”，从微小的细节中体现你的专业性。\n\n\n\n#### 1.9 用词不专业或不凝练\n\n\n\n建议：简历上的每一个词汇，都能够反映出你的水平。\n\n\n\n很多同学的简历用词比较随意，比如 “我用 axios 库完成了对数据库的查询”。\n\n\n\n其实大家都心知肚明，axios 是一个前端请求库，可以和后台进行交互，实现对数据的查询和管理。\n\n\n\n但上面那个表达，语言不够清晰和凝练，还可能会给面试官一种感觉：你真的知道 axios 是什么？你真的和后端联调过么？\n\n\n\n所以，一定要保证简历上的每个词都要 **准确，不能产生歧义** 。另外，尽量减少口语化的内容，不说用 xx 技术做了 xx，而是用（基于） xx 技术实现了 xx。\n\n\n\n#### 1.10 内容重复\n\n\n\n建议：简历中（尤其是项目和工作描述中）尽量不要出现重复的内容，不仅占用了空间，还会让面试官感到疲惫。\n\n\n\n#### 1.11 简历内容过于简单\n\n\n\n建议：当你简历上没有什么可写的内容、又必须要尽快投递简历时，可以 **适当包装** 。\n\n\n\n注意，此处的包装不是指改变自己的学习、工作年限等（这种属于 “隐瞒和欺骗”，一般不建议这么做），而是指适当夸大。\n\n\n\n毕竟写简历的本质就是：**如何以一种吹牛皮的方式尽量表现出你的能力。**\n\n\n\n虽然写简历要真实，但不能太老实！尤其是对于没有工作经历、项目经历、荣誉奖项的同学，要学会适当包装、合理包装。\n\n\n\n比如尝试将你目前正在学的技术从 “了解” 改为 “熟悉”，或者把你还没来得及实现的项目功能先提前写上去等等。\n\n\n\n但是，不要过分包装，而且既然你提前把一些内容写到了简历上，就要加倍努力赶紧去真正学会 / 实现它。\n\n\n\n#### 1.12 简历内容很多，但没有突出重点\n\n\n\n建议：在写简历时，可以将部分内容片段进行加粗，或者多去写某部分的内容，来吸引面试官去提问。\n\n\n\n比如：\n\n\n\n1. 自己掌握的很好技术名词\n2. 自己项目中大量运用的技术\n3. 自己项目的优化成果数据\n4. 获得的名词较高、含金量较高的奖项\n5. 其他同学很少接触到的新技术或深入知识点\n\n\n\n#### 1.13 部分语句不通顺\n\n\n\n建议：你写在简历上的每一句话都有可能会暴露你的思维逻辑能力，所以必须保证语句通顺、逻辑合理。\n\n\n\n#### 1.14 简历空间没有合理利用\n\n\n\n建议：除非你实在写不满一页纸，否则简历上的所有内容都要做到 “惜字如金”。能只用一行写完的内容，就不要换第二行再加那么几个字。另外，简历上尽量不要出现空白，比如一行只写了半句话、或者只占用了半页纸等。\n\n\n\n实在不知道写什么，就去参考下别人的简历，并且自己再多学习一些技术、做一些项目。\n\n\n\n#### 1.15 简历各板块的顺序不合理\n\n\n\n建议：根据个人优势对各板块进行排序，把最有亮点的部分放上面。比如你的奖项比较多、但学历相对低了一些，就可以把奖项写在前面、学历放到最后去写。\n\n\n\n### 2、个人信息\n\n\n\n#### 2.1 个人信息占用的篇幅过多\n\n\n\n建议：一般个人信息只占用简历整体 5 ~ 10% 的篇幅即可。可以通过在一行内同时写多个信息来节约空间，并保证间距合理。\n\n\n\n#### 2.2 照片不清晰 / 不端正\n\n\n\n建议：照片要清晰端正，蓝底 / 白底 / 红底都可以，最好表情自然、面带微笑，尽量穿白衬衫或者正装，体现一个人的精神面貌。\n\n\n\n#### 2.3 写了固定的期望薪资范围\n\n\n\n建议：除非公司明确要求，否则不建议写期望薪资。原因如下：\n\n\n\n1. 很多公司的薪资还算公开透明，没必要写\n2. 可能你自己本身对某个行业的薪酬水平不了解，薪资写高了可能会错失求职机会\n3. 当你的表现或实际水平超出了你写的预期薪资范围时，会被人按照你的预期薪资来砍价，相当于把自己限制住了\n\n\n\n当然，如果你要应聘高级岗位、或者对自己很自信，那么可以写比较高的期望薪资，从而过滤一些公司、猎头的打扰。\n\n\n\n#### 2.4 缺少个人相关链接\n\n\n\n建议：因为简历的篇幅和内容有限，所以如果你的个人经历很丰富，推荐在简历上补充一些链接，比如个人网站、个人博客、个人作品集、代码仓库等，体现你的实践能力。\n\n\n\n### 3、教育背景\n\n\n\n#### 3.1 成绩排名一般\n\n\n\n建议：一般排名高于前 20% 的同学才建议在简历上写排名，否则没有优势。（尖子班除外）\n\n\n\n#### 3.2 主修课程浪费了空间\n\n\n\n建议：本身就是计算机相关专业（或者专业和求职岗位相匹配）的同学不用再占用空间去写自己的主修课程了，因为学校教的内容往往比较基础、而且面试官默认这个专业或者投递这个岗位的同学都应该会这些课，写上去也没有什么优势。\n\n\n\n但是建议非计算机相关专业（或者专业和求职岗位不匹配）的同学适当列举关键主修课程，优先列举和求职岗位相关的、取得分数较高的课。\n\n\n\n如果有得分较高的课程（比如 90 分以上），可以在课程名后用括号补充分数。\n\n\n\n#### 3.3 存在学历造假风险\n\n\n\n建议：除非迫不得已，否则不建议学历造假，因为大多数公司都是有背景调查的，哪怕通过造假顺利入职，也可能会被突然查出来并强制离职。\n\n\n\n### 4、技术栈\n\n\n\n#### 4.1 同一行列举了过多的技术名词\n\n\n\n建议：写你会的技术栈时，尽量不要用特别长的一句话、像报菜名似的列举过多技术名词。建议采用列表的形式，每一行单独写一个技术的多个子知识点或者一系列相关的技术，做到把每一块技术写得更具体、清晰。\n\n\n\n#### 4.2 XX 技术写得过于简略，没有充分利用空间\n\n\n\n建议：一般情况下，你掌握或熟悉的技术不要只写一个技术名词，而是建议利用好每一行的空间，多补充该技术中你掌握的知识点和技术细节，会让人觉得更真实、有说服力。\n\n\n\n当然，如果某个技术你只是了解或听说过，就把你知道的知识点写上去即可。\n\n\n\n#### 4.3 同一行列举了多个不相关的技术\n\n\n\n建议：从简历的技术栈部分中不仅可以看出你学过哪些技术、掌握哪些技术，还可以看出你对技术的分类和知识点的梳理能力。尽量每一行写清楚一个技术，或者把一系列相关的技术放在同一行（比如 SSM 框架）；而不要把前端、后端、算法等知识点混在同一行去写。\n\n\n\n#### 4.4 缺少你对 XX 技术的实践应用能力\n\n\n\n建议：技术栈部分光写自己会什么技术、了解哪些知识是不够的，因为大多数面试官重视的是你的实践能力，即你能不能使用该技术完成工作，而不是纸上谈兵。因此可以适当补充半句：“你能用这些技术做什么？”，从而体现你的实践能力。公司往往倾向于选择问题解决能力强、实践经验丰富的同学。\n\n\n\n#### 4.5 XX 内容过于基础，无法体现出你的能力\n\n\n\n建议：尽量避免去写默认所有人都会的内容，比如 Java 的几种数据结构、前端 HTML 的标签、面向对象编程等。\n\n\n\n#### 4.6 XX 内容写得过于宽泛和模糊，缺乏可信度\n\n\n\n建议：尽量不要写过于宽泛、模糊不清、无法证明的的内容，比如：\n\n\n\n-  熟悉面向对象编程 \n-  有一定后端基础 \n-  了解常见性能优化手段 \n-  有良好的开发规范 \n-  具备良好的编码能力 \n\n\n\n专业的面试官基本就默认当做你不了解、或者不具备这些能力。\n\n\n\n你应当把这些宽泛的知识具体化，比如：\n\n\n\n-  熟悉面向对象编程 => 了解哪些软件开发原则、熟悉哪些设计模式等？ \n-  有一定后端基础 => 你学过哪些后端知识？ \n-  了解常见性能优化手段 => 具体了解或实践过哪些性能优化手段？ \n-  有良好的开发规范 => 熟悉或使用过哪些开发规范、用过什么工具来规范团队开发？ \n-  具备良好的编码能力 => 会用哪些开发工具、熟悉哪些编程技巧？ \n\n\n\n写得更具体一些，才会更有说服力。\n\n\n\n#### 4.7 各技术点的顺序不当\n\n\n\n建议：和做短视频一样，我们要尽量把最吸引人的部分放在简历的最上面。所以建议优先把岗位描述中明确要求的、你学得最好的技术放在前面去写，和求职岗位关系没那么大的、仅是了解的知识点放到最后作为补充。\n\n\n\n#### 4.8 技术栈和其他同学过于相似，缺少区分度\n\n\n\n建议：哪怕大家都写同一个技术，你也可以写更多、更深入的知识点。\n\n\n\n建议多阅读借鉴他人简历的技术栈部分，查漏补缺。\n\n\n\n此外，平时除了学习主流技术外，最好能多去技术社区阅读一些技术文章，扩展自己的知识面。\n\n\n\n### 5、荣誉奖项\n\n\n\n#### 5.1 未重点突出高级别、高含金量的奖项\n\n\n\n建议：获得奖项的级别或含金量很高时，建议把奖项级别加粗来吸引面试官，比如 XX 竞赛全国 **一等奖** 。\n\n\n\n#### 5.2 奖项未排序\n\n\n\n建议：优先把认可度高的、参赛范围广的、获奖级别高的、和求职岗位更相关的奖项放上面，一些不知名的竞赛放到下面或者合并去写。\n\n\n\n### 6、工作经历（实习经历）\n\n\n\n#### 6.1 工作描述过于简单\n\n\n\n建议：写工作内容时，可以适当具体一些，比如补充你在这家公司用了什么技术、负责了什么样的项目、使用过什么方法和工具、解决过什么问题等，从而增加真实感。\n\n\n\n#### 6.2 工作内容和求职岗位关系不大\n\n\n\n建议：简历应当围绕求职岗位去写，重点去写求职岗位相关的经历。当然，如果有能证明你能力的其他工作经历，也可以简略说明，但不能占用过多篇幅。\n\n\n\n#### 6.3 缺少工作成果和个人价值的体现\n\n\n\n建议：尽量不要写自己在工作中收获了什么、学到了什么，而是多写自己做了什么、做出了什么成果，尤其是列举有明确数据的成果，比如 “写过 XX 篇文档、做过 X 场技术分享、给项目带来了多少的收入增长” 等，将更能体现自己的能力和价值。\n\n\n\n如果目前没有可写的成果，建议在之后的工作中多思考如何积累这些内容。\n\n\n\n#### 6.4 工作职责不明确\n\n\n\n建议：即使你在这家公司做了很多不同岗位的工作，也要有个重点突出的工作职责，而不是什么都写。\n\n\n\n#### 6.5 个人的工作内容不够突出\n\n\n\n建议：写工作内容的时候尽量突出自己的地位，在合适的情况下，尽量能把 “参与” 改成 “负责” 或 “主导” 某工作。\n\n\n\n#### 6.6 XX 工作写得过于宽泛和模糊，缺乏可信度\n\n\n\n建议：尽量让你的工作描述更有说服力，比如写 “与产品经理高效沟通”，不如改成去写：“你是怎么实现和他人的高效沟通？”，比如用了什么项目管理工具？或者跟前端协作时用了什么接口管理工具？\n\n\n\n### 7、项目经历\n\n\n\n#### 7.1 项目工作描述的写法存在不足\n\n\n\n建议：写项目的工作描述时，不要把所有内容混在一起，而是建议用列表的形式  **分点** 去写 ，每个工作 / 亮点独占一行，每一点 **尽量具体** 。写的越具体，往往越体现真实性。\n\n\n\n可用 STAR 分析法（场景、任务、行动、成果）来梳理自己的核心工作。\n\n\n\n提供 2 个标准句式，括号部分表示可选填：\n\n\n\n1. （在 xx 公司 xx 项目中，）在 xx 情况下，运用 xx 技术，解决了 xx（或者优化了 xx），达到了 xx 效果（或者带来 xx 收益等）。\n2. 为了解决 xx 问题，选用 xx 技术（或方法）实现了 xx，并使用 xx 技术（或方法）优化了 xx，实测提升了 xx 性能（或者降低了 xx 等）。\n\n\n\n举个例子：为适应产品特性、加快迭代速度，后端由 Springboot 重构至 Node.js ，数据库由 MySQL 迁移至 MongoDB ，实现了前后一体的 **集中式配置中心** ，提高了接近 **1 倍** 的开发效率。\n\n\n\n注意每个小点的长度不宜过长，要留给面试官提问的空间。\n\n\n\n#### 7.2 技术栈提到的技术没有在项目中运用\n\n\n\n建议：技术栈里提到的技术和知识点尽量多在项目经历中体现，否则容易给面试官一种 “只是学过或听说过，而不会运用” 的感觉。\n\n\n\n#### 7.3 项目技术或业务相似度过高\n\n\n\n建议：尽量不要写运用了太多重复技术栈、或者业务相似的项目，最好能够让各个项目形成互补。\n\n\n\n前端的话可以考虑一个 PC 端 + 一个移动端项目或者技术类项目（脚手架、组件库等）；后端可以考虑一个业务系统（比如管理系统、电商、社群、博客等）+ 一个技术类框架（比如 RPC、迷你 Spring、服务器等）。\n\n\n\n#### 7.4 项目过多\n\n\n\n建议：注意，写到简历上的项目不是越多越好！建议重点去写 2 - 3 个不同技术栈、不同业务场景的项目。\n\n\n\n一个功能完整的、描述清楚的、实际上线了的项目可能都比你写几个不上线的小 Demo 更有说服力。\n\n\n\n当然，如果你每个项目做的都很好，实在无法取舍的话就都写上吧~\n\n\n\n#### 7.5 项目介绍太长\n\n\n\n建议：注意每个项目里内容的比重，项目介绍的占比不要太多，一般 1 - 2 行足够了。\n\n\n\n记住，你不是在做推广！在简历中，面试官更关注的是 **你在项目中负责什么、做了什么、怎么通过技术和设计能力去解决问题的** 。至于项目本身的介绍，用一两句话直击核心就好，重点在于交代 **和你工作有关** 的内容，其余的可以在面试时展开介绍。\n\n\n\n#### 7.6 项目工作描述过于直白平淡\n\n\n\n建议：要想项目有亮点，需要 **深一度**。不能只写你完成了什么工作，而是要有一定的优化和扩展，让整句话读起来有起伏和递进。\n\n\n\n比如你可以在完成某功能的基础上进一步优化，或者改造现有的项目框架、推陈出新，或者提升系统各方面的性能（可用性、稳定性、用户体验、吞吐量、时延等）。\n\n\n\n建议大家多去了解你项目中用到的技术的同类技术，对这些技术的优缺点和适合的应用场景有个大致的印象。\n\n\n\n#### 7.7 项目没有提供可访问的线上地址\n\n\n\n建议：条件允许的话，强烈建议提供可在线访问的项目地址（域名尽量简短，好让面试官访问），从而体现你项目的真实性，将会是一个非常不错的加分项。\n\n\n\n因为绝大多数同学写项目经历的时候，不放已上线的项目地址。有的时候你写的点再多、吹得天花乱坠，都不如直接放一个可访问的项目地址来得实在，能够直接证明你真的做过这个项目、从而体现你的项目经验。对于前端同学来说这点更重要，直接给面试官看体验效果最实在。你做的网站用不用心，一看便知。\n\n\n\n#### 7.8 项目工作描述脱离了实际业务场景\n\n\n\n建议：写你在项目中的工作和技术运用时，最好能结合具体的业务去写，不要说写的所有内容都和你的项目本身关系不大、过于通用，即放到其他任何一个项目里都可以这么写。\n\n\n\n那样不仅缺少了真实性、也体现不出你的自主性以及对业务的思考。\n\n\n\n#### 7.9 各项目的工作描述存在重复\n\n\n\n建议：各项目的工作描述中尽量不要出现重复的内容，不仅浪费了空间，还会让面试官感到疲惫。\n\n\n\n#### 7.10 XX 技术不适合应用于当前项目的业务场景\n\n\n\n建议：每一个技术的运用都要切合实际的业务场景，不要为了用技术而用技术。\n\n\n\n在学习某个技术时必须要明确它的应用场景，而且在选用某个技术时，多思考你为什么用这项技术而不用同类的。比如你通过调研和对比发现你用的技术在当前业务场景下优势更明显，那么可以在项目的工作描述中补充这些对比以及你的思考，从而体现你的技术选型能力。\n\n\n\n#### 7.11 没有写具体的优化效果\n\n\n\n建议：只要提到 “优化” 这两个字，就一定要提供对比数据，即：优化后相对于优化前 xx 性能提升了多少？响应时长减少了多少？稳定性提升了多少等等，而不是脱离实际的测试去盲目做优化。\n\n\n\n#### 7.12 项目和其他同学过于相似，缺少区分度\n\n\n\n建议：其实绝大多数同学都是跟着网上的教程做项目，但同一个项目，也有高下之分。\n\n\n\n如果你做的是网上大众化的教程项目，建议给项目改个名、换个皮、自主加一些新功能、尝试做一些优化，来增加区分度。\n\n\n\n### 8、个人优势（自我评价）\n\n\n\n#### 8.1 自我评价没有说服力，属于正确的废话\n\n\n\n建议：自我评价板块不是必须要写的。如果要写，就 **必须让你的自我评价有信服力** ！\n\n\n\n不要只说自己哪里的能力强、怎么怎么厉害，而是需要一些事例、数据、证据来证明。\n\n\n\n举些例子：\n\n\n\n1. 我学习能力强，对新技术有强烈的好奇心 => 补充：曾通过官方文档、自主查阅资料自学了 XX、XX 新技术，并通过 RSS 持续关注该技术最新动态。\n2. 我乐于从事有挑战性的工作 => 补充：我曾经担任 XX 队长，在 XX 困难的条件下，解决了 XX 问题，取得了 XX 成果。\n3. 我喜欢分享知识、善于总结 => 补充：连续 XX 天发布个人博客，发布过 XX 个学习总结等等\n4. 我很帅 => 补充个人照片\n\n\n\n这样写自我评价，就不再是虚的了，而是真的能让面试官感受到你的这些优点。\n\n\n\n这里有个小技巧，可以根据目标公司的岗位要求去写自我评价，做到对号入座。\n\n\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1678440086802-f3ccf74d-c23c-435c-94cb-399e4072b4aa-20230424165416519.png)\n\n\n\n比如公司要求招有团队协作经验的，那就写：我善于团队合作，曾经组队参与 XX、XX 项目，统筹负责了 XX、XX，怎么提升团队工作效率之类的。\n\n\n\n这样从招聘者的角度来看，你是有用心准备过的，目的性明确，也是加分项。\n\n\n\n#### 8.2 自我评价板块篇幅占用较多\n\n\n\n建议：自我评价板块不是必须要写的，即使要写，也不要占用过多的篇幅。尽量通过技术栈、实践经历、荣誉奖项来更有力地突出你的优势。\n\n\n\n## 优秀简历参考\n\n这份简历上没有任何一个竞赛奖项或科研成果，但通过一些小技巧，依旧能够吸引面试官！\n\n该简历已征得当事人同意并脱敏，确保不侵犯权益\n\n\n\n### 简历内容\n\n这份简历只有一页，非常精简，内容分为 **教育经历、技术栈、实习经历、项目经历** 四部分。\n\n#### 教育经历\n\n学校：上海 XXX 工程院校 本科在读\n\n专业：软件工程\n\n外语：大一时通过 CET 4、CET 6 考试\n\n#### 技术栈\n\n**后端**\n\n熟悉: Java\n\n了解：SpringCloud、Express.js、Node.js、Python\n\n\n\n**数据库**\n\n熟悉：MySQL\n\n了解：MongoDB\n\n\n\n**中间件**\n\n了解：Redis、RabbitMQ、Elasticsearch\n\n\n\n**DevOps**\n\n了解：微服务、Jenkins、Gitlab CI / CD、Nginx、Traefik、Linux\n\n\n\n**云计算**\n\n了解:  Docker、Kubernetes\n\n\n\n**前端**\n\n了解:  React、React Native、Javascript、HTML、CSS、Grafana\n\n\n\n#### 实习经历\n\nXX 有限公司 后端开发工程师（实习）\n\n-  在腾讯 XX 部门从事 **管理系统** 开发，主要参与故障处理平台建设 \n-  完成故障处理流程灰度、流程版本升级功能的需求分析、数据库设计、界面原型设计以及前后端实现，加快了运营团队的迭代速度 \n-  为方便团队掌握大规模故障的情况，参与了大规模告警机制的开发流程，并为其开发前端交互界面 \n-  使用 Grafana 开发运营监控视图，使团队成员可以快速掌握运营状况，及时做出调整 \n\n\n\n#### 项目经历\n\n**XXX 新媒体信息流聚合平台**\n\n展示地址：https://xxx.live（不公开）\n\n-  独立开发的基于 **MERN** 技术栈的 **新媒体信息流整合** 平台，采用 **前后端分离架构** \n-  使用 **React** 构建前端，对手机端 **交互模式** 进行了 **专门优化** ，使用 Cloudflare 作为 **CDN** \n-  使用 **React Native** 开发了 **跨平台** 的移动端应用，提高了开发效率，减少了 **50%** 的开发时间 \n-  为适应产品特性，加快迭代速度，后端由 **Springboot** 重构至 Node.js ，数据库由 **MySQL** 迁移至 **MongoDB** ，实现了前后一体的 **集中式配置中心** ，提高了接近 **1 倍** 的开发效率 \n-  使用 **JWT** 用户鉴权实现了 **平台内容分级机制** ，用户可自定义界面，用户设置 **云端同步** \n-  采用 **Redis** 实现了 **高频信息缓存** ，加快了 **请求响应速度** ，降低了 **90%** 以上的数据库压力 \n-  使用 **Elasticsearch** 实现 **全站内容搜索** ，相比 MongoDB 搜索效率提升 **80%** 以上 \n-  利用 **RabbitMQ** 的队列机制进行 **削峰** ，缓解了 **高并发** 情况下的 **系统资源短缺** 问题 \n-  为加强爬虫系统灵活性，将其由 **Scrapy** 重写为 **Node.js** ，实现了**分批分时、错峰爬取** \n-  为提升开发效率，使用 **Gitlab CI/CD** 进行 **持续集成** 和 **持续部署** ，实现了 **构建部署自动化** \n-  采用 **Nginx** 和 **Traefik** 进行 **前端部署** 和 **反向代理** ，增强了软件系统的 **安全性** \n-  为配合 **集群化部署** ，前后端均以 **Docker** 作为容器，可在任一陌生机器 **迅速启动应用** \n-  曾使用 **VPS** 测试搭建了拥有 **10** 个节点的 **K8s** 集群，可进行应用的 **快速扩容** 和 **集中式管理** \n\n\n\n**Rubbish XXX**\n\n-  垃圾分类查询工具，负责 **技术选型** 、**架构设计** 和 **前后端开发** 工作 \n-  为适应产品特性，使用 **MongoDB** 作为数据库，实现了垃圾分类、讨论区等功能 \n-  为减轻数据库压力，使用 **Redis** 对搜索结果进行 **缓存** ，同时 **极大缩短了应用响应时间** \n\n\n\n### 点评\n\n我不知道大家看完学弟的简历后有什么感受，反正给我最明显的感觉就是两点：\n\n1.  他会的技术很多 \n2.  自主性很强，并且善于用技术解决问题 \n\n\n\n而且呢，看完他的简历后，他的 **新媒体信息流聚合** 项目给我留下了深刻的印象，为啥呢？\n\n\n\n首先，这个项目经历占据了他简历的大部分内容（50 % 左右）。虽然很长，但是有关这个项目的介绍却字字珠玑，句句精华！\n\n\n\n比如这句：为适应产品特性，加快迭代速度，后端由 **Springboot** 重构至 Node.js ，数据库由 **MySQL** 迁移至 **MongoDB** ，实现了前后一体的 **集中式配置中心** ，提高了接近 **1 倍** 的开发效率。\n\n\n\n和大多数同学介绍项目时直接简单写一句 “用什么技术实现了什么功能” 不同，这句话点明了四个关键：\n\n\n\n- 为什么要做？（为适应产品特性，加快迭代速度）\n- 怎么做？用什么技术？（后端由 **Springboot** 重构至 Node.js ，数据库由 **MySQL** 迁移至 **MongoDB**）\n- 实现了什么？（前后一体的 **集中式配置中心**）\n- 达到了怎样的效果？（提高了接近 **1 倍** 的开发效率）\n\n\n\n有前因、有技术、有后果，给人的感觉就是这位同学做事有目的、有自主性、又善于分析和总结，这些正是很多面试官都看中的特质。再加上介绍中使用大量的 **加粗** 强调了重点，使用具体数据（如 50%）量化了效果，再次给人加深了印象。我觉得这种写法非常值得大家学习！\n\n\n\n很多同学担心自己简历上没东西写，那不妨认认真真做一个项目，然后按照他的项目经历写法，展示到简历上。\n\n\n\n## 更多简历参考\n\n可以访问编程导航网站的写简历板块（https://www.code-nav.cn/resume），分类查看简历及建议。\n\n\n\n## 视频分享\n\n鱼皮在 B 站公开的写简历建议：https://www.bilibili.com/video/BV1iA41127Jv/\n\n鱼皮在星球内直播分享过【写简历技巧】专题讲座：https://t.zsxq.com/022rjyF2B\n\n还有两场直播修改简历的案例分享，相信能帮大家打开思路：\n\n- [写简历经验 + 案例分享（在线改简历）](https://t.zsxq.com/03na2JqfQ)（Java 简历 4 份 + 前端校招 1 份）\n- [Java 写简历经验 + 案例分享](https://t.zsxq.com/04JMJYjyf)（Java 简历 5 份）\n\n\n\n用一个具体项目来学习如何挖掘项目亮点，并列举了一些前端项目亮点：\n\n- [YuIndex Web 终端项目分享](https://bcdh.yuque.com/books/share/2dd2567c-a826-4d9d-9303-bd288269e874/gh4bsv#6d6d2e57)",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 35,
        "thumbNum": 0,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-04-24T09:36:09.000+00:00",
        "updateTime": "2023-05-06T07:25:45.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1310,
          "coin": 170,
          "followeeNum": 601,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-17T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-05-06T10:09:53.000+00:00"
        },
        "tags": [
          "文章",
          "简历",
          "求职",
          "经验分享"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1650432050454376449",
        "title": "企业项目研发流程",
        "description": null,
        "content": "> 一线大厂的项目研发流程分享，帮助大家快速了解一个项目是如何从想法到落地上线的。\n\n\n\n大家好，我是鱼皮。\n\n\n\n很多未工作过的小伙伴都很好奇：企业中做项目是怎样的流程？尤其是大厂那些百万用户的项目，和自己学编程时做项目到底有什么区别呢？\n\n\n\n**实话说，区别可大了！**\n\n\n\n自己开发项目那是单打独斗，自己掌握命运，不会拖垮队友；但企业中开发项目是开团打本，大家是一根绳上的蚂蚱，每个人都会影响整个项目。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712012036685.png)\n\n\n\n我自己也在几家公司实习过，不得不说，大厂和其他公司的研发流程也有很大的区别。\n\n\n\n因此，对于大多数同学，如果没有在大厂工作过，对很多研发环节可能都是一无所知的。\n\n\n\n所以今天给大家揭秘一下大厂的项目研发流程，帮大家开拓思路。\n\n\n\n正好之前有同志质疑我的日常工作就只有写代码和摸鱼？！这篇文章就作为回击，让他明白，在大厂做项目，可不止写代码那么简单！\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712011545940.png)\n\n\n\n注意：这篇文章更侧重于理论知识，鱼皮曾经在星球直播带大家以实践的方式系统学习团队合作开发项目的方法，保证大家都能上线自己的项目，可以看下 [星球项目训练营](https://t.zsxq.com/0cg8VKgdC) 。如果还未加入星球，欢迎 [加入编程导航知识星球](https://yupi.icu/) 。\n\n\n\n本文视频版：https://www.bilibili.com/video/BV11q4y1T7kY\n\n\n\n## 大厂研发流程揭秘\n\n\n\n为了规范团队、保证项目的进展，大厂研发流程通常还是比较复杂的。\n\n\n\n可以分为很多个阶段，用一张思维导图来概括：\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/%E4%B8%80%E7%BA%BF%E5%A4%A7%E5%8E%82%E7%A0%94%E5%8F%91%E6%B5%81%E7%A8%8B%E6%8F%AD%E7%A7%98.png)\n\n\n\n需要注意的是，以上阶段并不是完全按从上到下的顺序执行，阶段间可能存在交叉，比如 **技术选型** 其实在 **设计阶段** 就应该考虑。\n\n\n\n正式工作一年多，我也是经历过多次项目的完整研发流程的。下面就以我的视角，带大家快速过一遍~\n\n\n\n（为了内容更有趣，以下故事有虚构成分）\n\n\n\n### 需求阶段\n\n\n\n今天是周一，鱼皮像往常一样骑着他的小电动车来到公司，殊不知，等待他的是一场噩梦的开始。\n\n\n\n#### 需求产生\n\n\n\n上午十点，产品妹子找到鱼皮，告诉他：咱们的系统上线后，用户表示很多功能并不好用，需要大改。\n\n\n\n老板也找到鱼皮，告诉他：我今天打开页面竟然加载了十几秒，咱们这个系统的性能太烂了吧！\n\n\n\n鱼皮心想：呕豁，完蛋！估计得做个新的项目了，又要开会了。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712141645333.png)\n\n\n\n果然，没过多久，屏幕上弹出了一条 “欢迎加入会议” 的邀请。\n\n\n\n#### 需求评审\n\n\n\n第二天上午，老板、产品、测试、几位开发大哥和鱼皮一起来到会议室，具体讨论昨天提到的那些需求 **是否合理、要不要做** ？\n\n\n\n产品妹子打开文档，说到：这一期呢，我们要做这几个需求，下面我来详细讲一下，大家一起评估下有没有问题。\n\n\n\n#### 需求分析\n\n\n\n接下来，产品妹子正在对着屏幕侃侃而谈、疯狂输出时，旁边的开发大哥坐不住了。\n\n\n\n开发大哥：这个需求不合理啊！\n\n\n\n产品：为啥不合理？用户就是有这个需求啊！\n\n\n\n开发大哥：我知道，实现不了啊！\n\n\n\n于是开始了经典的产品开发撕逼大战。。。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712141444097.png)\n\n\n\n而鱼皮正躲在角落冷静分析 **这个需求怎么做** ，过了一会儿，提出了一种改动低、实现快的解决方案，平息了这场战争。\n\n\n\n#### 排期\n\n\n\n确定需求合理、可实现之后，产品妹子问到：那这个需求啥时候能上线呀？\n\n\n\n开发大哥：我这周忙，下周吧。\n\n\n\n产品：用户可能比较着急，这周就要呢！\n\n\n\n开发大哥：我知道，做不完啊！\n\n\n\n于是开始了经典的产品开发撕逼大战。。。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712141336633.png)\n\n\n\n鱼皮：要不我们把这个需求拆解为功能 A 和功能 B，这周我先把功能 A 做了，功能 B 排到下周二测试，下周四上线？\n\n\n\n就这样，我们一个个安排了需求的计划完成日期。\n\n\n\n### 设计阶段\n\n\n\n终于开完会了，看了下时间，都该下班了！\n\n\n\n唉，需求讨论完了，产品的工作是完成了一些，可鱼皮的工作才刚刚开始。\n\n\n\n急着开始写代码么？\n\n\n\n**不，想好怎么写代码比写代码更重要。**\n\n\n\n#### 架构设计\n\n\n\n鱼皮打开写文档软件和画图软件，开始梳理整个系统，从整体到局部，依次设计出系统的层次结构、各层间交互的接口和通讯方式、每层之间包含哪些重要模块、模块选择何种物理部署方式等。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/693275-20180308155215280-770422402.png)\n\n\n\n#### 概要设计\n\n\n\n写完架构设计后，鱼皮开始对着产品妹子写的 PRD（产品需求文档），分析需求，然后依然是从整体到局部，先整理出系统需要的功能模块，再分析每个功能模块内有哪些子模块。\n\n\n\n和抽象的架构设计相比，概要设计和需求的关系更紧密，是对架构设计的细化。\n\n\n\n打个比方大家就明白了，你要盖一栋楼，架构设计就是从整体来考虑，总共有几层、每层管道怎么接、每层有几户、地基怎么打等；而概要设计就是考虑每户套件的内部怎么划分，哪里是客厅、哪里是卫生间。\n\n\n\n很多情况下，概要设计和架构设计可能会在一个文档中进行，划分并不明确。\n\n\n\n#### 详细设计\n\n\n\n想好系统有哪些功能后，鱼皮就开始具体分析每个功能如何实现，用到哪些算法、需要注重哪些细节等。\n\n\n\n#### 方案对齐\n\n\n\n写好设计文档后，下次会议上，鱼皮和其他的开发同学（前端、后端等）一起针对自己设计的方案展开讨论，最终产生一个统一的方案，然后大家分工去做就好了。\n\n\n\n#### 测试用例设计\n\n\n\n为了保证系统功能的正常稳定，测试同学（或者叫 QA）是非常重要的，测试不是像我们自己做项目一样对着网页点几下就 ok 了。\n\n\n\n在大公司中，为了保证测试的覆盖度、提高测试效率，一般是要设计测试用例的，比如：用户点击 “登录”，未传任何数据，期望结果是警告用户输入用户名和密码。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/product-content-testcase-1X3-12439a68c4.png)\n\n\n\n测试用例设计完后，需要其他同学一起来评审把关，而不是只交给测试同学。因为一个人很容易忽略掉很多测试细节，最好让更熟悉代码的开发同学一起帮忙补充。\n\n\n\n鱼皮自己也写了几个测试可能会遗漏的用例，和测试同学一起进行了确认，尽量让问题暴露在测试阶段而不是线上。\n\n\n\n### 研发准备\n\n\n\n写了快一周的设计文档，终于准备开始动手搭建项目了。但在此之前，还有一些准备工作要进行。\n\n\n\n#### 技术预研\n\n\n\n如今技术发展太快，新技术层出不穷，所以鱼皮首先对项目中需要或可能需要用到的技术进行了调研。\n\n\n\n#### 技术选型\n\n\n\n通过调研，鱼皮得到了几个可以满足需求的技术，但他开始纠结：这么多技术，我该用哪一个呢？是用 SSM 框架还是 Play 框架呢？用 guava 包还是 Apache Commons 呢？\n\n\n\n鱼皮又打开了写文档软件，开始对比不同技术的优劣，头疼啊，技术选型要考量的因素太多了，比如：\n\n\n\n- 单从技术考虑：性能、易用性、稳定性、主流程度和生态、文档详细度\n- 结合团队：团队成员对技术的熟悉度、掌控度（有无精通该技术的人）\n- 结合业务：是否适应业务的量级（单机 or 微服务）、是否适应业务（读多、写多 or 分析多）\n\n\n\n对于关键的项目，鱼皮自己还不敢完全确定选型，因此在写好自己的选型文档后，与同事和 Leader 一起讨论，才最终确认。\n\n\n\n#### 资源申请\n\n\n\n确认好技术后，就要申请资源。比如鱼皮用到了 MySQL 数据库，但是这个 MySQL 从哪儿来呢？\n\n\n\n以前的话，鱼皮都是去买一台云服务器，自己搭建 MySQL。但是在企业中，一般是有集中管理和分配资源的平台的，直接到平台填写预算、等领导审批、然后等着下发资源就好了。千万不能私自用自己的或买外部的服务器来部署项目，不安全！\n\n\n\n鱼皮这次直接申请到了 2 万多一年的云数据库，真的是爽死了。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712140804895.png)\n\n\n\n#### 环境准备\n\n\n\n申请好数据库等资源后，鱼皮按照申请机器的版本搭建了一模一样的本地开发环境和测试环境，后面就可以直接连接了。\n\n\n\n#### 项目初始化\n\n\n\n环境准备妥当后，由于是新项目，鱼皮要搞一个最小可运行的初始化项目 Demo，使用 **脚手架** 自动生成代码，而不是从零开始一个个新建文件、手敲重复代码。\n\n\n\n#### 依赖安装\n\n\n\n生成了项目代码后，鱼皮使用包管理工具（前端 yarn、Java Maven /  Gradle 等）自动安装依赖，然后项目 Demo 就可以运行啦！\n\n\n\n### 研发阶段\n\n\n\n前期准备完成后，这才到了程序员朋友们最熟悉的写代码环节，也是鱼皮最爱的环节。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712140724830.png)\n\n\n\n因为之前设计方案时需要保持冷静、仔细思考，没法边听歌儿边做；而方案设计好后，已经明确了该怎么做，写代码实现就很简单了，顶多是遇到一些坑，上网搜索去解决就好了。\n\n\n\n#### 本地开发\n\n\n\n开发时，一般鱼皮会先在本地写代码，通过配置热更新工具，实现代码更新时自动重新编译打包，而不用手动重启项目，大大提高了开发效率。\n\n\n\n对了，企业开发都会使用版本控制系统的，比如 Git，开发前记得先创建一个自己的分支，在这个分支上开发。\n\n\n\n#### 远程开发\n\n\n\n现在还有一种比较流行的远程开发方式，就是可以像编辑本地文件一样编辑远程文件，直接修改服务器上的代码。一般我们每位研发同学是有自己的开发机的，通过远程开发就省去了反复部署调试的麻烦，提高效率。一般用 VSCode 等开发工具，安装远程开发插件就可以实现了。\n\n\n\n#### 代码优化\n\n\n\n鱼皮在写代码的时候，始终保持主动优化代码的好习惯，注重代码的时空复杂度；并且当重复代码多了，会想办法抽象成函数或者使用设计模式。之前专门写文章分享过我的编程习惯：[我写代码时的小倔强](https://mp.weixin.qq.com/s/df5JMmBbw294y2sAPMwGbA) 。\n\n\n\n#### 单元测试\n\n\n\n注意！不要听到测试就以为是测试同学的工作，开发同学也同样需要编写小粒度的测试来为自己的代码负责。\n\n\n\n鱼皮一般会为每个数据库读写函数和业务逻辑函数编写单元测试，像 Java 的话一般用 JUnit 等工具，还可以用 Jacoco 生成测试覆盖度报告。每次修改关键代码后，都要执行一遍单元测试，防止意外错误。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712140554038.png)\n\n\n\n#### 开发联调\n\n\n\n鱼皮终于写好了后端代码，也自测完成了，下面就是把写好的代码打包构建，然后把可执行项目包发布到测试服务器上，和前端同学一起联调，让他请求我的接口，验证系统的功能是否可用。\n\n\n\n### 测试验证\n\n\n\n鱼皮和前端联调完毕后，告知了测试和产品同学。\n\n\n\n测试验证是企业中至关重要的环节，甚至可以说是最后一道防线。测试的目的是找 Bug，尽量发现系统中的问题，把它们扼杀在测试阶段。\n\n\n\n在企业中，测试验证又有很多类型。\n\n\n\n#### 集成测试\n\n\n\n集成测试比单元测试粒度更大，是把多个模块或代码单元放在一起，验证模块之间的集成和调用关系。\n\n\n\n因为单个函数的执行可能是正常的，但把多个函数组合在一起顺序调用，可能就会出现问题。\n\n\n\n打个比方，我们有个吃面包系统：\n\n\n\n功能 A：小鱼吃一个面包\n\n\n\n功能 B：小皮吃一个面包\n\n\n\n每次只有一个面包，独立执行功能 A 和 B 都是允许的。但如果两个一起执行，后执行的那个功能就会报错。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712140428508.png)\n\n\n\n#### 系统测试\n\n\n\n系统测试比集成测试的粒度更大，测试对象是整个系统，不仅包括软件，还可能覆盖对硬件的测试。\n\n\n\n#### 产品体验\n\n\n\n除了测试同学要验证系统可用性，产品妹子也要体验下功能是否符合预期、是否易用。大多数情况下，产品会在体验时提出修改建议，开发可能还要再去做一些修改。\n\n\n\n#### 验收测试\n\n\n\n测试和产品妹子终于表示没有问题啦，那就到了最后一步，把整个产品或功能给最终的用户来体验。老板 用户说没问题，才是真的没问题！\n\n\n\n### 提交阶段\n\n\n\n系统没问题之后，鱼皮就可以把代码发布到远程仓库了，一般使用 Git 和 SVN 等版本控制系统。\n\n\n\n#### 代码提交\n\n\n\n鱼皮首先在本地触发代码提交（git commit），为保证规范，在大项目中一般会使用提交检测插件，防止你把错误的代码进行了提交。\n\n\n\n#### 代码推送\n\n\n\n下一步就是把本地的提交推送到远程的同名分支。一般大厂会有推送检测工具，检测代码的错误、圈复杂度、代码规范等，和提交检测一样，防止你把错误或不规范的代码进行了推送。\n\n\n\n#### 合并请求\n\n\n\n代码分支推送到远程之后，鱼皮发起了一个分支合并请求（MR），希望把该分支的代码合并到主干分支（没问题的代码）。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712140308463.png)\n\n\n\n#### 代码审查\n\n\n\n并不是发起了合并请求就能直接合并，还要通过代码审查，即 CR。\n\n\n\n审查又分为两种方式：人审和机审。\n\n\n\n相信不少同学都知道人审，一般是由你的上级和其他项目负责人来阅读和评论你的代码，觉得没问题就 Approve（通过），否则打回去修改。\n\n\n\n那机审是个啥呢？其实就是机器自动检测你的代码是否符合规范，是否能够成功自动化构建等，一般是由项目负责人配置的，可以帮助发现一些人工难以发现的问题。\n\n\n\n刚接触新项目的时候，鱼皮经常被机审折磨得苦不堪言，经常被提示一些莫名其妙的代码问题，比如加号要换行，文件行末要加空行等。但后来注意编码习惯后，就很自然地适应了，的确不错。\n\n\n\n### 发布阶段\n\n\n\n代码审查通过后，鱼皮的项目代码就可以发布上线啦。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210613143744811.png)\n\n\n\n#### 打包构建\n\n\n\n传统上线方式是开发人员到正式服务器上拉取代码，然后安装依赖，再通过工具把代码打包构建，得到部署包，通过 Nginx、Tomcat、Docker 等技术运行。\n\n\n\n但这样效率很低，有很多重复工作。所以大厂一般是用自动化构建的，像 Jenkins、各种 CI / CD 工具等。代码合并到主分之后，由机器把代码打包构建为最终的部署包。\n\n\n\n#### 预发布\n\n\n\n为了防止上线出问题，一般我们会先在预发布环境部署项目，再观察一下是否能够正常运行。\n\n\n\n#### 正式发布\n\n\n\n预发布测试正常后，鱼皮终于等到了上线的这一刻。大项目一般都会部署在多台机器上，所以不可能一台台登录机器去发布部署包。\n\n\n\n通常公司会提供可视化发布平台，点选需要发布机器（一般先灰度，选一小部分机器，再全量发布），点击一键发布，等项目管理员审批通过之后，就交给机器自动部署吧！\n\n\n\n### 后续\n\n\n\n鱼皮曾天真地以为项目上线之后，就可以高枕无忧了。但后来发现，项目上线之后，同样需要保持警觉。虽然已经测试过，但仍然时不时会出现个预期之外的小 Bug，还是很考验心态的。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712140135097.png)\n\n\n\n来看看上线之后，鱼皮做了哪些事呢？\n\n\n\n#### 监控运维\n\n\n\n鱼皮会定期查看项目的监控面板，观察项目的运行情况，机器的负载等。\n\n\n\n#### 统计分析\n\n\n\n鱼皮在代码中添加了一些日志，可以利用 ELK 等日志收集可视化平台对这些日志进行分析，从而感知到用户的行为，进一步优化业务和系统。\n\n\n\n比如我会统计用户执行 SQL 查询的耗时，对重复率高的慢 SQL 进行针对性地优化。\n\n\n\n#### 事件反馈\n\n\n\n有的时候，用户自己都不能清楚地描述 Bug，而且历史 Bug 也不方便找到。所以公司内部一般会有事件反馈平台，产品等内部同学在接收到 Bug 时，会在该平台发布一个 Bug 事件，详细描述 Bug 出现的时间、状况、详情等，便于我们开发集中分析和处理问题。\n\n\n\n![img](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/image-20210712140028393.png)\n\n\n\n#### 文档沉淀\n\n\n\n每次上线了新功能和项目，鱼皮都会通过写文档来记录项目的背景、设计方案、开发过程和一些坑点，便于后续其他同学了解项目，这是非常重要的！利人利己。\n\n\n\n曾经分享过我的写文档技巧：[如何写好文档？](https://mp.weixin.qq.com/s/oQTksFE-cPYRKGJnr71-kw)\n\n\n\n#### 迭代优化\n\n\n\n最后，一个需求的结束往往只是另一个需求的开始。像鱼皮最近在跟进的项目，一期做完做二期，二期还没做完三期就来了；还要抽出时间去优化以前的代码，这日子遥遥无期，没盼头啊！\n\n\n\n------\n\n\n\n看完本文后，欢迎阅读我之前的这篇文章：[大厂机密！30 个提升团队研发效能的锦囊](https://mp.weixin.qq.com/s/RyqO8ry29zAL40ToVitxTQ) ，了解更多大厂技术。",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 29,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-04-24T09:30:39.000+00:00",
        "updateTime": "2023-05-06T14:05:28.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1310,
          "coin": 170,
          "followeeNum": 601,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-17T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-05-06T10:09:53.000+00:00"
        },
        "tags": [
          "文章",
          "项目",
          "实战",
          "经验分享"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1650410227037679618",
        "title": "如何给自己制定学习目标和计划？",
        "description": null,
        "content": "学任何东西都一样，有目标是很重要的，可以帮助你更快地学习、少走弯路、提高执行力、缓解懒惰与焦虑。\n\n那么如何定目标、做计划呢？分享一些我自己的方法。\n\n\n\n## 三档目标\n\n定目标也是有技巧的，不要只给自己定一个很大很遥远的目标，比如“我要进大厂”。而是要以这个大目标为目的地，持续对你的目标进行拆分，让你的小船随时都能看到灯塔，知道该往哪儿划。\n\n\n\n### 大目标\n\n大目标是指你最终的发展方向，比如是选择 Java 开发岗、前端开发岗还是算法岗，或者是提升学历，再或者找到某厂的工作、跳槽涨薪等。\n\n如何确定大目标呢？可以看下这篇文章：https://t.zsxq.com/04iaqjiUR\n\n\n\n### 中目标\n\n中目标是指为了完成大目标，你每个阶段必须要做的事。\n\n举个例子，如果你想从事 Java 后端开发，那么需要依次经历以下几个阶段：\n\n1. 学完 Java 编程语言\n2. 学完 Java 开发框架\n3. 学习后端常用中间件\n4. 学习架构设计和 Java 高级知识（比如并发编程、JVM）\n5. 准备简历和面试\n\n\n\n比如你当前处于第二阶段，那么就可以定以下几个中目标：\n\n1. 看一套完整的视频教程学完 Servlet\n2. 看一套完整的视频教程学完 SSM\n3. 看一套完整的视频教程学完 Spring Boot\n4. 用以上技术做出一个自己的项目\n\n\n\n如何确定中目标？可以看下星球里的各个学习路线（https://t.zsxq.com/04VFiaIQb），学完一个技术再学下一个。注意不要给自己定下不合时宜的目标，比如你刚学 Java，就想着去深入理解 Java 底层知识，完全没必要。也要尽量舍弃掉那些和你大目标无关的事情。\n\n\n\n### 小目标\n\n小目标是指你每天或者每小时要做的事，比如今天我要看 3 集教程、完成某功能的开发，或者我要花 2 个小时完成某个作业等。\n\n小目标虽然感觉是最好定的，但也是绝大多数同学忽略掉的。之所以有些同学感觉自己每天浑浑噩噩，就是因为没有定小目标。你都没想好自己要做什么，怎么可能有动力？怎么可能高效率？\n\n如何定制小目标呢？\n\n建议是 **量力而为** ，不要给自己定制太难、周期太长的小目标，而是贵在坚持。攻克一个个小目标，也会给你带来成就感，激励自己持续学习。\n\n\n\n------\n\n\n\n总结一下：大目标要明确，中目标要有序，小目标要多定制。\n\n如果你的大目标都不确定，那么你可能和目的地背道而驰；如果你的中目标不确定，那么可能会走弯路；如果你不持续定小目标，那么可能就会感到无所事事、浪费时间。\n\n## 给你的目标加上期限\n\n除了分档定制目标外，一定要记得给你的目标加上期限，期限越明确具体越好。比如 “花 2 - 4 个月学完 Java 基础”的目标不如“花 2 个月看完一套视频教程来学完 Java 基础”。\n\n因为你的时间不是无限的，所以做目标时要有大局观。比如你只有半年就要找工作了，开发框架都还没学，却还想花 4 个月去复习 Java 基础，是不推荐的。\n\n小目标的期限一定要更具体，比如“今天下午我要花 3 小时去看视频学 Java”，而不是“今天下午我要看视频学 Java”。有了期限就会有一定的紧张感，更容易让你保持专注，从而提高学习效率。\n\n\n\n## 随时记录、持续定计划\n\n有的时候，我们可能的确不知道今天或明天要做什么，比如放暑假的时候突然闲下来，会让你很容易偷懒。或者打工人一到周末，就不想学习。\n\n怎么缓解这种情况呢？教大家一个我自己的方法 —— 随时记录、持续定计划。\n\n我自己基本是全年无休的工作（创作）状态，而且总感觉自己的事情做不完，虽然很忙，但也有更大的收获。\n\n\n\n比如我今天上班突然看到一个技术名词，正好是后端的，和我职业发展相关，那么我会先把它记到自己的待办事项中，等到周末闲下来的时候再打开待办事项、再去学习这个技术。\n\n任何我可能会做的事情、突发的灵感我都会立即记录。如果是生活中要做的事，我是直接用手机的备忘录来记录；如果是和工作相关的计划，我会在电脑上用本地文档（Typora）来记录；对于团队的工作和任务，我会用【滴答清单】来记录和提醒。\n\n养成这个习惯后，我的记事簿越来越多，使得我每天都有事情做，不会浪费时间。而且更能激励自己持续做事，同时通过时间的沉淀来把握重要的事情。（比如一个事情我反复记了 3 次，肯定很重要，优先做这个）\n\n\n\n------\n\n\n\n大家看完这篇文章后，不妨立刻给自己定下大 / 中 / 小目标、并且准备一个自己的电子备忘录吧，坚持一段时间，相信你会有所改变，共勉。",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 14,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-04-24T08:03:55.000+00:00",
        "updateTime": "2023-05-07T00:36:25.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1310,
          "coin": 170,
          "followeeNum": 601,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-17T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-05-06T10:09:53.000+00:00"
        },
        "tags": [
          "文章",
          "学习建议"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1650410097194610690",
        "title": "报培训机构还是自学？",
        "description": null,
        "content": "这可能是很多同学都关心的问题，比如下面这位小伙伴的提问：\n\n> 鱼皮哥，我是一个普通 2 本的大三学生，我的学习方向是java后端开发，目前我的学习进度是 学习完springcloud了，但是没有做过微服务分布式架构的项目 只做过springboot项目，然后算法方面刷的不是很多，面试题八股文也没有开始过呢。 我们学校的情况是 3年学校学习➕ 1年校外培训机构培训的模式，马上学校就要求我们去这些实训基地实训，但是我特别纠结 因为和学校合作的这些企业是某锋，某桥等培训机构，他们开设的课程是 h5前端，java后端，大数据等，去那里培训5个月的时间就会安排你就业。我现在很迷茫：这些培训机构都在说他们有多好什么的，然后出来的平均薪资都是 15到20k，我们这里好多同学都是三年不学，然后靠着这几个月培训去找工作，我也开始陷入了怀疑之中，不知道培训机构是否真的有说的那么好？以我目前的学习的阶段，是否还有必要去那里培训？\n\n\n\n下面分享一下我的看法：\n\n\n\n首先，不要完全相信跟培训机构学几个月就能拿到 15 - 20 k 的工资。虽然是有报了班后能达到这个薪资水平的同学，但前提是自己有一定基础、有能力、或者很努力的，只是少数而已。否则的话，很多同学大学不用读了，直接去培训半年就完事，大家都来卷计算机了。\n\n并不是说培训班没用，但是不要无脑报班。建议大家在有报班的想法前，先分析一下自己的现状，可以问自己几个问题：\n\n1. 我为什么要报班？希望的收获是什么？\n2. 不报班能否学会编程？有没有什么难点自学解决不了？\n\n\n\n其实现在网上免费的编程学习资料已经很多了，比如尚硅谷、黑马的免费公开课。如果你自己能学动、能坚持学下去，那么就不需要报培训机构，网上的教程真的已经足够你学到找工作的水平了，而且鱼皮的知识星球也能给大家很多的学习建议和帮助，起码不会让你迷茫。\n\n\n\n但如果你非常着急，比如必须要在半年内找到一份工作，那么也许可以考虑下培训机构，他们主打的就是快速就业，还是有一套自己的方法的。但是建议在报培训机构前，先在网上看下他们的公开课，并且多做一些参考比较，选择最适合自己的机构。\n\n\n\n虽然培训机构能帮助大家快速入门，但是一定要记住，知识只要靠自己努力学来的，他们只是给你领个路，只靠培训机构半年的学习还远不能帮助你成为一名合格的开发者。无论是否报班，都要自己不断自学、不断敲代码做项目、多看些课堂之外的知识。",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 18,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-04-24T08:03:24.000+00:00",
        "updateTime": "2023-05-07T00:36:50.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1310,
          "coin": 170,
          "followeeNum": 601,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-17T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-05-06T10:09:53.000+00:00"
        },
        "tags": [
          "文章",
          "学习建议"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1650409872237309953",
        "title": "如何学好一门新技术？",
        "description": null,
        "content": "> by 程序员鱼皮，[编程导航知识星球出品，欢迎加入](https://yupi.icu)\n\n\n\n无论学习任何编程技术，都可以遵循以下步骤：\n\n\n\n## 学习步骤\n\n### 1）基本了解\n\n首先了解这个技术是做什么的？有什么优点和缺点？适用于什么场景？\n\n建议通过网上的经验分享来对怎么学习这个技术有个大致的认识，比如这个视频：https://www.bilibili.com/video/BV1za411p7Ny/，不感兴趣或者和目标无关的技术可先不学。\n\n我现在学任何新技术都先去网上搜一下别人的经验或这个技术的大纲，一般至少要看 3 - 5 篇经验吧，然后心里稍微有点数知道要学啥、要掌握啥了，就上网看别人的完整视频 / 书籍教程，或者官方文档、别人的技术文章等等来进行系统学习。\n\n\n\n### 2）快速上手\n\n跟着教程或官方文档（Get Started）快速跑通这个技术的 Demo，先把这个技术用起来，而不是看了一堆理论后再写代码。\n\n比如学习 Vue 的时候，先快速跟着 Vue 的官方文档搭建一个初始化项目，自己看一下项目里有哪些文件之类的，可以多探索一下，会对之后的学习有帮助。\n\n\n\n### 3）系统学习\n\n跟着教程或官方文档完整学习，并能够 **被动** 使用这个技术来完成项目或解决问题。这里的被动是指别人让你用这个技术（比如网上现成的项目或教程视频）。\n\n除了以视频 / 书籍教程学习为主线外，多写代码、多写 Bug、多利用搜索引擎自主解决 Bug、多看别人的经验和技术文章，持续积累和写笔记总结，也是非常重要的，印象会更深刻。\n\n\n\n### 4）主动运用\n\n在能够使用技术完成项目后。如果这门技术和你的岗位目标相关（比如 SpringBoot 对 Java 后端开发很重要），那么可以进一步了解该技术的特性，并做到熟练运用，**主动** 用该技术去解决对应的问题。可以通过阅读官方文档、进阶书籍等进行学习。\n\n建议多自己思考、发挥想象来用该技术做一些有意思的项目。\n\n\n\n### 5）了解原理\n\n以上帝视角来了解该技术的核心思想、架构设计、关键模块、各模块的联系和作用等，可以通过百度、阅读官方文档、技术文章、进阶书籍等进行学习。\n\n\n\n### 6）深入源码\n\n阅读该技术的源码，由整体到局部逐渐深入。对于初学者，不建议自己去啃源码。可以利用开源仓库或进阶教程进行学习，掘金小册或极客时间都是不错的。\n\n如果我们还没有学完基本的开发框架、还没有独立完成过项目，那么不建议这个时候去看源码，性价比不高。你的编程经验越丰富，一般读源码就越轻松，是需要时间来积累的。\n\n\n\n### 7）修改源码\n\n能够在该技术源码的基础上修复一些 Bug、修改部分源码、或者定制开发新功能。可以多和原作者、项目的 issues 区讨论交流，最好能给该项目贡献代码，写在 GitHub 上也是很加分的经历。给知名项目贡献代码可能比自己做一个完整项目还要抓眼。\n\n\n\n### 8）推陈出新\n\n在把一门技术（框架）吃透后，你可以尝试自己实现类似的技术框架，比如弥补原技术的缺点，使得你自己的东西也能拥有一席之地。\n\n\n\n## 该学到哪一步？\n\n\n\n建议大家按照星球的学习路线（https://t.zsxq.com/04VFiaIQb），给自己每门技术的学习定一个计划，比如每天学多少、多少天学完等。有了计划后更容易执行和坚持。\n\n\n\n要注意整体学习时间的把控，不要在一门技术上停留太久。\n\n\n\n如果为了找实习或一般的工作，前 2 个步骤完成即可，企业中大多数的工作其实就是复制粘贴，只要进入公司一般不会遇到工作不能完成的问题。\n\n\n\n如果想进大厂，建议要有部分技术（至少 1 个）能够完成前 4 个步骤，能做到第 4 步之后当然更好了。\n\n\n\n在做项目时我们如果需要用到某个没学过的技术，也是建议先百度，去搜一下这个技术怎么最快使用起来？怎么最快满足我们的需求？而不是任何新技术我们都要看完整教程去学习。有了灯塔，小船才知道该往哪儿划。\n\n\n\n------\n\n\n\n大家加油！",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 8,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-04-24T08:02:31.000+00:00",
        "updateTime": "2023-05-06T09:09:38.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1310,
          "coin": 170,
          "followeeNum": 601,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-17T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-05-06T10:09:53.000+00:00"
        },
        "tags": [
          "文章",
          "学习建议"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "67",
    "size": "10",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "7"
  },
  "message": "ok"
}